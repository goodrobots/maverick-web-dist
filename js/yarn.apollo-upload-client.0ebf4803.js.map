{"version":3,"sources":["webpack:///./node_modules/apollo-upload-client/lib/index.js"],"names":["_interopRequireDefault","_extends2","_require","ApolloLink","Observable","_require2","selectURI","selectHttpOptionsAndBody","fallbackHttpConfig","serializeFetchParameter","createSignalIfSupported","parseAndCheckHttpResponse","_require3","extractFiles","ReactNativeFile","exports","createUploadLink","_temp","_ref","_ref$uri","uri","fetchUri","_ref$fetch","fetch","linkFetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","_context$clientAwaren","clientAwareness","name","version","contextConfig","default","_selectHttpOptionsAnd","body","_extractFiles","clone","files","payload","size","form","FormData","append","map","i","forEach","paths","JSON","stringify","file","observer","_createSignalIfSuppor","controller","signal","then","response","setContext","result","next","complete","catch","error","errors","data","abort"],"mappings":"2HAEA,IAAIA,EAAyB,EAAQ,QAEjCC,EAAYD,EACd,EAAQ,SAGNE,EAAW,EAAQ,QACrBC,EAAaD,EAASC,WACtBC,EAAaF,EAASE,WAEpBC,EAAY,EAAQ,QACtBC,EAAYD,EAAUC,UACtBC,EAA2BF,EAAUE,yBACrCC,EAAqBH,EAAUG,mBAC/BC,EAA0BJ,EAAUI,wBACpCC,EAA0BL,EAAUK,wBACpCC,EAA4BN,EAAUM,0BAEpCC,EAAY,EAAQ,QACtBC,EAAeD,EAAUC,aACzBC,EAAkBF,EAAUE,gBAE9BC,EAAQD,gBAAkBA,EAE1BC,EAAQC,iBAAmB,SAASC,GAClC,IAAIC,OAAiB,IAAVD,EAAmB,GAAKA,EACjCE,EAAWD,EAAKE,IAChBC,OAAwB,IAAbF,EAAsB,WAAaA,EAC9CG,EAAaJ,EAAKK,MAClBC,OAA2B,IAAfF,EAAwBC,MAAQD,EAC5CG,EAAeP,EAAKO,aACpBC,EAAcR,EAAKQ,YACnBC,EAAUT,EAAKS,QACfC,EAAoBV,EAAKU,kBAEvBC,EAAa,CACfC,KAAM,CACJF,kBAAmBA,GAErBG,QAASN,EACTC,YAAaA,EACbC,QAASA,GAEX,OAAO,IAAIxB,GAAW,SAAS6B,GAC7B,IAAIZ,EAAMd,EAAU0B,EAAWX,GAC3BY,EAAUD,EAAUE,aACpBC,EAAwBF,EAAQG,gBACpCD,OAC4B,IAA1BA,EAAmC,GAAKA,EAC1C,IAAIE,EAAOF,EAAsBE,KAC/BC,EAAUH,EAAsBG,QAChCX,EAAUM,EAAQN,QAChBY,EAAgB,CAClBT,KAAMG,EAAQH,KACdC,QAASE,EAAQR,aACjBC,YAAaO,EAAQP,YACrBC,SAAS,EAAI1B,EAAUuC,SACrB,GACAH,GAAQ,CACN,4BAA6BA,GAE/B,GACAC,GAAW,CACT,+BAAgCA,GAElC,GACAX,IAIAc,EAAwBlC,EACxByB,EACAxB,EACAqB,EACAU,GAEFR,EAAUU,EAAsBV,QAChCW,EAAOD,EAAsBC,KAE3BC,EAAgB9B,EAAa6B,GAC/BE,EAAQD,EAAcC,MACtBC,EAAQF,EAAcE,MAEpBC,EAAUrC,EAAwBmC,EAAO,WAE7C,GAAIC,EAAME,KAAM,QACPhB,EAAQJ,QAAQ,gBACvB,IAAIqB,EAAO,IAAIC,SACfD,EAAKE,OAAO,aAAcJ,GAC1B,IAAIK,EAAM,GACNC,EAAI,EACRP,EAAMQ,SAAQ,SAASC,GACrBH,IAAMC,GAAKE,KAEbN,EAAKE,OAAO,MAAOK,KAAKC,UAAUL,IAClCC,EAAI,EACJP,EAAMQ,SAAQ,SAASC,EAAOG,GAC5BT,EAAKE,SAASE,EAAGK,EAAMA,EAAKpB,SAE9BN,EAAQW,KAAOM,OACVjB,EAAQW,KAAOI,EAEtB,OAAO,IAAI1C,GAAW,SAASsD,GAC7B,IAAIC,EAAwBjD,IAC1BkD,EAAaD,EAAsBC,WACnCC,EAASF,EAAsBE,OAqBjC,OAnBID,IAAY7B,EAAQ8B,OAASA,GACjCrC,EAAUJ,EAAKW,GACZ+B,MAAK,SAASC,GAIb,OAHA/B,EAAUgC,WAAW,CACnBD,SAAUA,IAELA,KAERD,KAAKnD,EAA0BqB,IAC/B8B,MAAK,SAASG,GACbP,EAASQ,KAAKD,GACdP,EAASS,cAEVC,OAAM,SAASC,GACK,eAAfA,EAAMhC,OACNgC,EAAMJ,QAAUI,EAAMJ,OAAOK,QAAUD,EAAMJ,OAAOM,MACtDb,EAASQ,KAAKG,EAAMJ,QACtBP,EAASW,MAAMA,OAEZ,WACDT,GAAYA,EAAWY","file":"js/yarn.apollo-upload-client.0ebf4803.js","sourcesContent":["'use strict'\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')\n\nvar _extends2 = _interopRequireDefault(\n  require('@babel/runtime/helpers/extends')\n)\n\nvar _require = require('apollo-link'),\n  ApolloLink = _require.ApolloLink,\n  Observable = _require.Observable\n\nvar _require2 = require('apollo-link-http-common'),\n  selectURI = _require2.selectURI,\n  selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n  fallbackHttpConfig = _require2.fallbackHttpConfig,\n  serializeFetchParameter = _require2.serializeFetchParameter,\n  createSignalIfSupported = _require2.createSignalIfSupported,\n  parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse\n\nvar _require3 = require('extract-files'),\n  extractFiles = _require3.extractFiles,\n  ReactNativeFile = _require3.ReactNativeFile\n\nexports.ReactNativeFile = ReactNativeFile\n\nexports.createUploadLink = function(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$uri = _ref.uri,\n    fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n    _ref$fetch = _ref.fetch,\n    linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,\n    fetchOptions = _ref.fetchOptions,\n    credentials = _ref.credentials,\n    headers = _ref.headers,\n    includeExtensions = _ref.includeExtensions\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  }\n  return new ApolloLink(function(operation) {\n    var uri = selectURI(operation, fetchUri)\n    var context = operation.getContext()\n    var _context$clientAwaren = context.clientAwareness\n    _context$clientAwaren =\n      _context$clientAwaren === void 0 ? {} : _context$clientAwaren\n    var name = _context$clientAwaren.name,\n      version = _context$clientAwaren.version,\n      headers = context.headers\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)(\n        {},\n        name && {\n          'apollographql-client-name': name\n        },\n        {},\n        version && {\n          'apollographql-client-version': version\n        },\n        {},\n        headers\n      )\n    }\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(\n        operation,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      ),\n      options = _selectHttpOptionsAnd.options,\n      body = _selectHttpOptionsAnd.body\n\n    var _extractFiles = extractFiles(body),\n      clone = _extractFiles.clone,\n      files = _extractFiles.files\n\n    var payload = serializeFetchParameter(clone, 'Payload')\n\n    if (files.size) {\n      delete options.headers['content-type']\n      var form = new FormData()\n      form.append('operations', payload)\n      var map = {}\n      var i = 0\n      files.forEach(function(paths) {\n        map[++i] = paths\n      })\n      form.append('map', JSON.stringify(map))\n      i = 0\n      files.forEach(function(paths, file) {\n        form.append(++i, file, file.name)\n      })\n      options.body = form\n    } else options.body = payload\n\n    return new Observable(function(observer) {\n      var _createSignalIfSuppor = createSignalIfSupported(),\n        controller = _createSignalIfSuppor.controller,\n        signal = _createSignalIfSuppor.signal\n\n      if (controller) options.signal = signal\n      linkFetch(uri, options)\n        .then(function(response) {\n          operation.setContext({\n            response: response\n          })\n          return response\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(function(result) {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch(function(error) {\n          if (error.name === 'AbortError') return\n          if (error.result && error.result.errors && error.result.data)\n            observer.next(error.result)\n          observer.error(error)\n        })\n      return function() {\n        if (controller) controller.abort()\n      }\n    })\n  })\n}\n"],"sourceRoot":""}