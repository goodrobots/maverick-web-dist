{"version":3,"sources":["webpack:///./node_modules/vuex-router-sync/index.js"],"names":["cloneRoute","to","from","clone","name","path","hash","query","params","fullPath","meta","Object","freeze","exports","sync","store","router","options","moduleName","registerModule","namespaced","state","currentRoute","mutations","transition","currentPath","isTimeTraveling","storeUnwatch","watch","route","push","afterEachUnHook","afterEach","commit","unregisterModule"],"mappings":"0GA2DA,SAASA,EAAYC,EAAIC,GACvB,IAAIC,EAAQ,CACVC,KAAMH,EAAGG,KACTC,KAAMJ,EAAGI,KACTC,KAAML,EAAGK,KACTC,MAAON,EAAGM,MACVC,OAAQP,EAAGO,OACXC,SAAUR,EAAGQ,SACbC,KAAMT,EAAGS,MAKX,OAHIR,IACFC,EAAMD,KAAOF,EAAWE,IAEnBS,OAAOC,OAAOT,GAxEvBU,EAAQC,KAAO,SAAUC,EAAOC,EAAQC,GACtC,IAAIC,GAAcD,GAAW,IAAIC,YAAc,QAE/CH,EAAMI,eAAeD,EAAY,CAC/BE,YAAY,EACZC,MAAOrB,EAAWgB,EAAOM,cACzBC,UAAW,CACT,cAAiB,SAAwBF,EAAOG,GAC9CT,EAAMM,MAAMH,GAAclB,EAAWwB,EAAWvB,GAAIuB,EAAWtB,UAKrE,IACIuB,EADAC,GAAkB,EAIlBC,EAAeZ,EAAMa,OACvB,SAAUP,GAAS,OAAOA,EAAMH,MAChC,SAAUW,GACR,IAAIpB,EAAWoB,EAAMpB,SACjBA,IAAagB,IAGE,MAAfA,IACFC,GAAkB,EAClBV,EAAOc,KAAKD,IAEdJ,EAAchB,KAEhB,CAAEK,MAAM,IAINiB,EAAkBf,EAAOgB,WAAU,SAAU/B,EAAIC,GAC/CwB,EACFA,GAAkB,GAGpBD,EAAcxB,EAAGQ,SACjBM,EAAMkB,OAAOf,EAAa,iBAAkB,CAAEjB,GAAIA,EAAIC,KAAMA,QAG9D,OAAO,WAEkB,MAAnB6B,GACFA,IAIkB,MAAhBJ,GACFA,IAIFZ,EAAMmB,iBAAiBhB","file":"js/yarn.vuex-router-sync.94573332.js","sourcesContent":["exports.sync = function (store, router, options) {\n  var moduleName = (options || {}).moduleName || 'route'\n\n  store.registerModule(moduleName, {\n    namespaced: true,\n    state: cloneRoute(router.currentRoute),\n    mutations: {\n      'ROUTE_CHANGED': function ROUTE_CHANGED (state, transition) {\n        store.state[moduleName] = cloneRoute(transition.to, transition.from)\n      }\n    }\n  })\n\n  var isTimeTraveling = false\n  var currentPath\n\n  // sync router on store change\n  var storeUnwatch = store.watch(\n    function (state) { return state[moduleName]; },\n    function (route) {\n      var fullPath = route.fullPath;\n      if (fullPath === currentPath) {\n        return\n      }\n      if (currentPath != null) {\n        isTimeTraveling = true\n        router.push(route)\n      }\n      currentPath = fullPath\n    },\n    { sync: true }\n  )\n\n  // sync store on router navigation\n  var afterEachUnHook = router.afterEach(function (to, from) {\n    if (isTimeTraveling) {\n      isTimeTraveling = false\n      return\n    }\n    currentPath = to.fullPath\n    store.commit(moduleName + '/ROUTE_CHANGED', { to: to, from: from })\n  })\n\n  return function unsync () {\n    // On unsync, remove router hook\n    if (afterEachUnHook != null) {\n      afterEachUnHook()\n    }\n\n    // On unsync, remove store watch\n    if (storeUnwatch != null) {\n      storeUnwatch()\n    }\n\n    // On unsync, unregister Module with store\n    store.unregisterModule(moduleName)\n  }\n}\n\nfunction cloneRoute (to, from) {\n  var clone = {\n    name: to.name,\n    path: to.path,\n    hash: to.hash,\n    query: to.query,\n    params: to.params,\n    fullPath: to.fullPath,\n    meta: to.meta\n  }\n  if (from) {\n    clone.from = cloneRoute(from)\n  }\n  return Object.freeze(clone)\n}\n\n"],"sourceRoot":""}