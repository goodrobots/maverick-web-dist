{"version":3,"sources":["webpack:///./node_modules/graphql-anywhere/lib/graphql.js","webpack:///./node_modules/graphql-anywhere/lib/async.js"],"names":["Object","defineProperty","exports","value","apollo_utilities_1","graphql","resolver","document","rootValue","contextValue","variableValues","execOptions","mainDefinition","getMainDefinition","fragments","getFragmentDefinitions","fragmentMap","createFragmentMap","resultMapper","fragmentMatcher","execContext","executeSelectionSet","selectionSet","variables","result","selections","forEach","selection","shouldInclude","isField","fieldResult","executeField","resultFieldKey","resultKeyNameFromField","undefined","merge","fragment","isInlineFragment","name","Error","typeCondition","fragmentResult","field","fieldName","args","argumentsObjectFromField","info","isLeaf","resultKey","directives","getDirectiveInfoFromField","Array","isArray","executeSubSelectedArray","map","item","hasOwn","prototype","hasOwnProperty","dest","src","keys","key","srcVal","call","tslib_1","graphql_1","__awaiter","this","execute","_this","__generator","_a","label","sent","Promise","all"],"mappings":"yHACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAqB,EAAQ,QACjC,SAASC,EAAQC,EAAUC,EAAUC,EAAWC,EAAcC,EAAgBC,QACnD,IAAnBD,IAA6BA,EAAiB,SAC9B,IAAhBC,IAA0BA,EAAc,IAC5C,IAAIC,EAAiBR,EAAmBS,kBAAkBN,GACtDO,EAAYV,EAAmBW,uBAAuBR,GACtDS,EAAcZ,EAAmBa,kBAAkBH,GACnDI,EAAeP,EAAYO,aAC3BC,EAAkBR,EAAYQ,iBAAmB,WAAe,OAAO,GACvEC,EAAc,CACdJ,YAAaA,EACbP,aAAcA,EACdC,eAAgBA,EAChBQ,aAAcA,EACdZ,SAAUA,EACVa,gBAAiBA,GAErB,OAAOE,EAAoBT,EAAeU,aAAcd,EAAWY,GAGvE,SAASC,EAAoBC,EAAcd,EAAWY,GAClD,IAAIJ,EAAcI,EAAYJ,YAAaP,EAAeW,EAAYX,aAAcc,EAAYH,EAAYV,eACxGc,EAAS,GAmCb,OAlCAF,EAAaG,WAAWC,SAAQ,SAAUC,GACtC,IAAIJ,GAAcnB,EAAmBwB,cAAcD,EAAWJ,GAG9D,GAAInB,EAAmByB,QAAQF,GAAY,CACvC,IAAIG,EAAcC,EAAaJ,EAAWnB,EAAWY,GACjDY,EAAiB5B,EAAmB6B,uBAAuBN,QAC3CO,IAAhBJ,SAC+BI,IAA3BV,EAAOQ,GACPR,EAAOQ,GAAkBF,EAGzBK,EAAMX,EAAOQ,GAAiBF,QAIrC,CACD,IAAIM,OAAW,EACf,GAAIhC,EAAmBiC,iBAAiBV,GACpCS,EAAWT,OAIX,GADAS,EAAWpB,EAAYW,EAAUW,KAAKnC,QACjCiC,EACD,MAAM,IAAIG,MAAM,qBAAuBZ,EAAUW,KAAKnC,OAG9D,IAAIqC,EAAgBJ,EAASI,cAAcF,KAAKnC,MAChD,GAAIiB,EAAYD,gBAAgBX,EAAWgC,EAAe/B,GAAe,CACrE,IAAIgC,EAAiBpB,EAAoBe,EAASd,aAAcd,EAAWY,GAC3Ee,EAAMX,EAAQiB,QAItBrB,EAAYF,aACLE,EAAYF,aAAaM,EAAQhB,GAErCgB,EAEX,SAASO,EAAaW,EAAOlC,EAAWY,GACpC,IAAIG,EAAYH,EAAYV,eAAgBD,EAAeW,EAAYX,aAAcH,EAAWc,EAAYd,SACxGqC,EAAYD,EAAMJ,KAAKnC,MACvByC,EAAOxC,EAAmByC,yBAAyBH,EAAOnB,GAC1DuB,EAAO,CACPC,QAASL,EAAMpB,aACf0B,UAAW5C,EAAmB6B,uBAAuBS,GACrDO,WAAY7C,EAAmB8C,0BAA0BR,EAAOnB,GAChEmB,MAAOA,GAEPlB,EAASlB,EAASqC,EAAWnC,EAAWoC,EAAMnC,EAAcqC,GAChE,OAAKJ,EAAMpB,aAGG,MAAVE,EACOA,EAEP2B,MAAMC,QAAQ5B,GACP6B,EAAwBX,EAAOlB,EAAQJ,GAE3CC,EAAoBqB,EAAMpB,aAAcE,EAAQJ,GAR5CI,EAUf,SAAS6B,EAAwBX,EAAOlB,EAAQJ,GAC5C,OAAOI,EAAO8B,KAAI,SAAUC,GACxB,OAAa,OAATA,EACO,KAEPJ,MAAMC,QAAQG,GACPF,EAAwBX,EAAOa,EAAMnC,GAEzCC,EAAoBqB,EAAMpB,aAAciC,EAAMnC,MAzE7DlB,EAAQG,QAAUA,EA4ElB,IAAImD,EAASxD,OAAOyD,UAAUC,eAC9B,SAASvB,EAAMwB,EAAMC,GACL,OAARA,GAA+B,kBAARA,GACvB5D,OAAO6D,KAAKD,GAAKlC,SAAQ,SAAUoC,GAC/B,IAAIC,EAASH,EAAIE,GACZN,EAAOQ,KAAKL,EAAMG,GAInB3B,EAAMwB,EAAKG,GAAMC,GAHjBJ,EAAKG,GAAOC,KAQ5B7D,EAAQiC,MAAQA,G,oCC9GhBnC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAI8D,EAAU,EAAQ,QAClB7D,EAAqB,EAAQ,QAC7B8D,EAAY,EAAQ,QACxB,SAAS7D,EAAQC,EAAUC,EAAUC,EAAWC,EAAcC,EAAgBC,QACtD,IAAhBA,IAA0BA,EAAc,IAC5C,IAAIC,EAAiBR,EAAmBS,kBAAkBN,GACtDO,EAAYV,EAAmBW,uBAAuBR,GACtDS,EAAcZ,EAAmBa,kBAAkBH,GACnDI,EAAeP,EAAYO,aAC3BC,EAAkBR,EAAYQ,iBAAmB,WAAe,OAAO,GACvEC,EAAc,CACdJ,YAAaA,EACbP,aAAcA,EACdC,eAAgBA,EAChBQ,aAAcA,EACdZ,SAAUA,EACVa,gBAAiBA,GAErB,OAAOE,EAAoBT,EAAeU,aAAcd,EAAWY,GAGvE,SAASC,EAAoBC,EAAcd,EAAWY,GAClD,OAAO6C,EAAQE,UAAUC,UAAM,OAAQ,GAAQ,WAC3C,IAAIpD,EAAaP,EAAcc,EAAWC,EAAQ6C,EAC9CC,EAAQF,KACZ,OAAOH,EAAQM,YAAYH,MAAM,SAAUI,GACvC,OAAQA,EAAGC,OACP,KAAK,EA8CD,OA7CAzD,EAAcI,EAAYJ,YAAaP,EAAeW,EAAYX,aAAcc,EAAYH,EAAYV,eACxGc,EAAS,GACT6C,EAAU,SAAU1C,GAAa,OAAOsC,EAAQE,UAAUG,OAAO,OAAQ,GAAQ,WAC7E,IAAIxC,EAAaE,EAAgBI,EAAUI,EAAeC,EAC1D,OAAOwB,EAAQM,YAAYH,MAAM,SAAUI,GACvC,OAAQA,EAAGC,OACP,KAAK,EACD,OAAKrE,EAAmBwB,cAAcD,EAAWJ,GAG5CnB,EAAmByB,QAAQF,GACzB,CAAC,EAAGI,EAAaJ,EAAWnB,EAAWY,IADK,CAAC,EAAG,GAF5C,CAAC,GAIhB,KAAK,EAWD,OAVAU,EAAc0C,EAAGE,OACjB1C,EAAiB5B,EAAmB6B,uBAAuBN,QACvCO,IAAhBJ,SAC+BI,IAA3BV,EAAOQ,GACPR,EAAOQ,GAAkBF,EAGzBoC,EAAU/B,MAAMX,EAAOQ,GAAiBF,IAGzC,CAAC,GACZ,KAAK,EACD,GAAI1B,EAAmBiC,iBAAiBV,GACpCS,EAAWT,OAIX,GADAS,EAAWpB,EAAYW,EAAUW,KAAKnC,QACjCiC,EACD,MAAM,IAAIG,MAAM,qBAAuBZ,EAAUW,KAAKnC,OAI9D,OADAqC,EAAgBJ,EAASI,cAAcF,KAAKnC,MACvCiB,EAAYD,gBAAgBX,EAAWgC,EAAe/B,GACpD,CAAC,EAAGY,EAAoBe,EAASd,aAAcd,EAAWY,IADgB,CAAC,EAAG,GAEzF,KAAK,EACDqB,EAAiB+B,EAAGE,OACpBR,EAAU/B,MAAMX,EAAQiB,GACxB+B,EAAGC,MAAQ,EACf,KAAK,EAAG,MAAO,CAAC,WAIrB,CAAC,EAAGE,QAAQC,IAAItD,EAAaG,WAAW6B,IAAIe,KACvD,KAAK,EAED,OADAG,EAAGE,OACCtD,EAAYF,aACL,CAAC,EAAGE,EAAYF,aAAaM,EAAQhB,IAEzC,CAAC,EAAGgB,UAK/B,SAASO,EAAaW,EAAOlC,EAAWY,GACpC,OAAO6C,EAAQE,UAAUC,UAAM,OAAQ,GAAQ,WAC3C,IAAI7C,EAAWd,EAAcH,EAAUqC,EAAWC,EAAME,EAAMtB,EAC9D,OAAOyC,EAAQM,YAAYH,MAAM,SAAUI,GACvC,OAAQA,EAAGC,OACP,KAAK,EAUD,OATAlD,EAAYH,EAAYV,eAAgBD,EAAeW,EAAYX,aAAcH,EAAWc,EAAYd,SACxGqC,EAAYD,EAAMJ,KAAKnC,MACvByC,EAAOxC,EAAmByC,yBAAyBH,EAAOnB,GAC1DuB,EAAO,CACHC,QAASL,EAAMpB,aACf0B,UAAW5C,EAAmB6B,uBAAuBS,GACrDO,WAAY7C,EAAmB8C,0BAA0BR,EAAOnB,GAChEmB,MAAOA,GAEJ,CAAC,EAAGpC,EAASqC,EAAWnC,EAAWoC,EAAMnC,EAAcqC,IAClE,KAAK,EAED,OADAtB,EAASgD,EAAGE,OACPhC,EAAMpB,aAGG,MAAVE,EACO,CAAC,EAAGA,GAEX2B,MAAMC,QAAQ5B,GACP,CAAC,EAAG6B,EAAwBX,EAAOlB,EAAQJ,IAE/C,CAAC,EAAGC,EAAoBqB,EAAMpB,aAAcE,EAAQJ,IARhD,CAAC,EAAGI,UAanC,SAAS6B,EAAwBX,EAAOlB,EAAQJ,GAC5C,OAAOuD,QAAQC,IAAIpD,EAAO8B,KAAI,SAAUC,GACpC,OAAa,OAATA,EACO,KAEPJ,MAAMC,QAAQG,GACPF,EAAwBX,EAAOa,EAAMnC,GAEzCC,EAAoBqB,EAAMpB,aAAciC,EAAMnC,OAxG7DlB,EAAQG,QAAUA","file":"js/yarn.graphql-anywhere.9d5f72f2.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (variableValues === void 0) { variableValues = {}; }\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n    var result = {};\n    selectionSet.selections.forEach(function (selection) {\n        if (variables && !apollo_utilities_1.shouldInclude(selection, variables)) {\n            return;\n        }\n        if (apollo_utilities_1.isField(selection)) {\n            var fieldResult = executeField(selection, rootValue, execContext);\n            var resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n            if (fieldResult !== undefined) {\n                if (result[resultFieldKey] === undefined) {\n                    result[resultFieldKey] = fieldResult;\n                }\n                else {\n                    merge(result[resultFieldKey], fieldResult);\n                }\n            }\n        }\n        else {\n            var fragment = void 0;\n            if (apollo_utilities_1.isInlineFragment(selection)) {\n                fragment = selection;\n            }\n            else {\n                fragment = fragmentMap[selection.name.value];\n                if (!fragment) {\n                    throw new Error(\"No fragment named \" + selection.name.value);\n                }\n            }\n            var typeCondition = fragment.typeCondition.name.value;\n            if (execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) {\n                var fragmentResult = executeSelectionSet(fragment.selectionSet, rootValue, execContext);\n                merge(result, fragmentResult);\n            }\n        }\n    });\n    if (execContext.resultMapper) {\n        return execContext.resultMapper(result, rootValue);\n    }\n    return result;\n}\nfunction executeField(field, rootValue, execContext) {\n    var variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n    var fieldName = field.name.value;\n    var args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n    var info = {\n        isLeaf: !field.selectionSet,\n        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n        field: field,\n    };\n    var result = resolver(fieldName, rootValue, args, contextValue, info);\n    if (!field.selectionSet) {\n        return result;\n    }\n    if (result == null) {\n        return result;\n    }\n    if (Array.isArray(result)) {\n        return executeSubSelectedArray(field, result, execContext);\n    }\n    return executeSelectionSet(field.selectionSet, result, execContext);\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    });\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction merge(dest, src) {\n    if (src !== null && typeof src === 'object') {\n        Object.keys(src).forEach(function (key) {\n            var srcVal = src[key];\n            if (!hasOwn.call(dest, key)) {\n                dest[key] = srcVal;\n            }\n            else {\n                merge(dest[key], srcVal);\n            }\n        });\n    }\n}\nexports.merge = merge;\n//# sourceMappingURL=graphql.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar apollo_utilities_1 = require(\"apollo-utilities\");\nvar graphql_1 = require(\"./graphql\");\nfunction graphql(resolver, document, rootValue, contextValue, variableValues, execOptions) {\n    if (execOptions === void 0) { execOptions = {}; }\n    var mainDefinition = apollo_utilities_1.getMainDefinition(document);\n    var fragments = apollo_utilities_1.getFragmentDefinitions(document);\n    var fragmentMap = apollo_utilities_1.createFragmentMap(fragments);\n    var resultMapper = execOptions.resultMapper;\n    var fragmentMatcher = execOptions.fragmentMatcher || (function () { return true; });\n    var execContext = {\n        fragmentMap: fragmentMap,\n        contextValue: contextValue,\n        variableValues: variableValues,\n        resultMapper: resultMapper,\n        resolver: resolver,\n        fragmentMatcher: fragmentMatcher,\n    };\n    return executeSelectionSet(mainDefinition.selectionSet, rootValue, execContext);\n}\nexports.graphql = graphql;\nfunction executeSelectionSet(selectionSet, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var fragmentMap, contextValue, variables, result, execute;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n                    result = {};\n                    execute = function (selection) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var fieldResult, resultFieldKey, fragment, typeCondition, fragmentResult;\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!apollo_utilities_1.shouldInclude(selection, variables)) {\n                                        return [2];\n                                    }\n                                    if (!apollo_utilities_1.isField(selection)) return [3, 2];\n                                    return [4, executeField(selection, rootValue, execContext)];\n                                case 1:\n                                    fieldResult = _a.sent();\n                                    resultFieldKey = apollo_utilities_1.resultKeyNameFromField(selection);\n                                    if (fieldResult !== undefined) {\n                                        if (result[resultFieldKey] === undefined) {\n                                            result[resultFieldKey] = fieldResult;\n                                        }\n                                        else {\n                                            graphql_1.merge(result[resultFieldKey], fieldResult);\n                                        }\n                                    }\n                                    return [2];\n                                case 2:\n                                    if (apollo_utilities_1.isInlineFragment(selection)) {\n                                        fragment = selection;\n                                    }\n                                    else {\n                                        fragment = fragmentMap[selection.name.value];\n                                        if (!fragment) {\n                                            throw new Error(\"No fragment named \" + selection.name.value);\n                                        }\n                                    }\n                                    typeCondition = fragment.typeCondition.name.value;\n                                    if (!execContext.fragmentMatcher(rootValue, typeCondition, contextValue)) return [3, 4];\n                                    return [4, executeSelectionSet(fragment.selectionSet, rootValue, execContext)];\n                                case 3:\n                                    fragmentResult = _a.sent();\n                                    graphql_1.merge(result, fragmentResult);\n                                    _a.label = 4;\n                                case 4: return [2];\n                            }\n                        });\n                    }); };\n                    return [4, Promise.all(selectionSet.selections.map(execute))];\n                case 1:\n                    _a.sent();\n                    if (execContext.resultMapper) {\n                        return [2, execContext.resultMapper(result, rootValue)];\n                    }\n                    return [2, result];\n            }\n        });\n    });\n}\nfunction executeField(field, rootValue, execContext) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var variables, contextValue, resolver, fieldName, args, info, result;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    variables = execContext.variableValues, contextValue = execContext.contextValue, resolver = execContext.resolver;\n                    fieldName = field.name.value;\n                    args = apollo_utilities_1.argumentsObjectFromField(field, variables);\n                    info = {\n                        isLeaf: !field.selectionSet,\n                        resultKey: apollo_utilities_1.resultKeyNameFromField(field),\n                        directives: apollo_utilities_1.getDirectiveInfoFromField(field, variables),\n                        field: field,\n                    };\n                    return [4, resolver(fieldName, rootValue, args, contextValue, info)];\n                case 1:\n                    result = _a.sent();\n                    if (!field.selectionSet) {\n                        return [2, result];\n                    }\n                    if (result == null) {\n                        return [2, result];\n                    }\n                    if (Array.isArray(result)) {\n                        return [2, executeSubSelectedArray(field, result, execContext)];\n                    }\n                    return [2, executeSelectionSet(field.selectionSet, result, execContext)];\n            }\n        });\n    });\n}\nfunction executeSubSelectedArray(field, result, execContext) {\n    return Promise.all(result.map(function (item) {\n        if (item === null) {\n            return null;\n        }\n        if (Array.isArray(item)) {\n            return executeSubSelectedArray(field, item, execContext);\n        }\n        return executeSelectionSet(field.selectionSet, item, execContext);\n    }));\n}\n//# sourceMappingURL=async.js.map"],"sourceRoot":""}