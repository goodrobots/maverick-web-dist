{"version":3,"sources":["webpack:///./node_modules/graphql/language/blockString.mjs","webpack:///./node_modules/graphql/error/syntaxError.mjs","webpack:///./node_modules/graphql/language/source.mjs","webpack:///./node_modules/graphql/language/tokenKind.mjs","webpack:///./node_modules/graphql/language/lexer.mjs","webpack:///./node_modules/graphql/language/parser.mjs","webpack:///./node_modules/graphql/polyfills/flatMap.mjs","webpack:///./node_modules/graphql/utilities/assertValidName.mjs","webpack:///./node_modules/graphql/utilities/typeComparators.mjs","webpack:///./node_modules/graphql/type/validate.mjs","webpack:///./node_modules/graphql/utilities/typeFromAST.mjs","webpack:///./node_modules/graphql/utilities/TypeInfo.mjs","webpack:///./node_modules/graphql/language/predicates.mjs","webpack:///./node_modules/graphql/validation/rules/ExecutableDefinitions.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueOperationNames.mjs","webpack:///./node_modules/graphql/validation/rules/LoneAnonymousOperation.mjs","webpack:///./node_modules/graphql/validation/rules/SingleFieldSubscriptions.mjs","webpack:///./node_modules/graphql/jsutils/didYouMean.mjs","webpack:///./node_modules/graphql/jsutils/suggestionList.mjs","webpack:///./node_modules/graphql/validation/rules/KnownTypeNames.mjs","webpack:///./node_modules/graphql/validation/rules/FragmentsOnCompositeTypes.mjs","webpack:///./node_modules/graphql/validation/rules/VariablesAreInputTypes.mjs","webpack:///./node_modules/graphql/validation/rules/ScalarLeafs.mjs","webpack:///./node_modules/graphql/validation/rules/FieldsOnCorrectType.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueFragmentNames.mjs","webpack:///./node_modules/graphql/validation/rules/KnownFragmentNames.mjs","webpack:///./node_modules/graphql/validation/rules/NoUnusedFragments.mjs","webpack:///./node_modules/graphql/validation/rules/PossibleFragmentSpreads.mjs","webpack:///./node_modules/graphql/validation/rules/NoFragmentCycles.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueVariableNames.mjs","webpack:///./node_modules/graphql/validation/rules/NoUndefinedVariables.mjs","webpack:///./node_modules/graphql/validation/rules/NoUnusedVariables.mjs","webpack:///./node_modules/graphql/validation/rules/KnownDirectives.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.mjs","webpack:///./node_modules/graphql/validation/rules/KnownArgumentNames.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueArgumentNames.mjs","webpack:///./node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs","webpack:///./node_modules/graphql/validation/rules/ProvidedRequiredArguments.mjs","webpack:///./node_modules/graphql/validation/rules/VariablesInAllowedPosition.mjs","webpack:///./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.mjs","webpack:///./node_modules/graphql/validation/rules/PossibleTypeExtensions.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueInputFieldNames.mjs","webpack:///./node_modules/graphql/validation/rules/LoneSchemaDefinition.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueOperationTypes.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueTypeNames.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueEnumValueNames.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueFieldDefinitionNames.mjs","webpack:///./node_modules/graphql/validation/rules/UniqueDirectiveNames.mjs","webpack:///./node_modules/graphql/validation/specifiedRules.mjs","webpack:///./node_modules/graphql/validation/ValidationContext.mjs","webpack:///./node_modules/graphql/validation/validate.mjs","webpack:///./node_modules/graphql/jsutils/toObjMap.mjs","webpack:///./node_modules/graphql/language/directiveLocation.mjs","webpack:///./node_modules/graphql/jsutils/isNullish.mjs","webpack:///./node_modules/graphql/utilities/astFromValue.mjs","webpack:///./node_modules/graphql/type/introspection.mjs","webpack:///./node_modules/graphql/language/visitor.mjs","webpack:///./node_modules/graphql/jsutils/instanceOf.mjs","webpack:///./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","webpack:///./node_modules/graphql/utilities/getOperationAST.mjs","webpack:///./node_modules/graphql/utilities/valueFromAST.mjs","webpack:///./node_modules/graphql/utilities/buildClientSchema.mjs","webpack:///./node_modules/graphql/jsutils/keyValMap.mjs","webpack:///./node_modules/graphql/polyfills/objectEntries.mjs","webpack:///./node_modules/graphql/jsutils/defineToStringTag.mjs","webpack:///./node_modules/graphql/jsutils/mapValue.mjs","webpack:///./node_modules/graphql/jsutils/identityFunc.mjs","webpack:///./node_modules/graphql/utilities/valueFromASTUntyped.mjs","webpack:///./node_modules/graphql/type/definition.mjs","webpack:///./node_modules/graphql/language/printer.mjs","webpack:///./node_modules/graphql/language/location.mjs","webpack:///./node_modules/graphql/language/printLocation.mjs","webpack:///./node_modules/graphql/error/GraphQLError.mjs","webpack:///./node_modules/graphql/jsutils/keyMap.mjs","webpack:///./node_modules/graphql/jsutils/inspect.mjs","webpack:///./node_modules/graphql/jsutils/devAssert.mjs","webpack:///./node_modules/graphql/jsutils/defineToJSON.mjs","webpack:///./node_modules/graphql/jsutils/isObjectLike.mjs","webpack:///./node_modules/graphql/polyfills/objectValues.mjs","webpack:///./node_modules/graphql/polyfills/isFinite.mjs","webpack:///./node_modules/graphql/polyfills/isInteger.mjs","webpack:///./node_modules/graphql/type/scalars.mjs","webpack:///./node_modules/graphql/polyfills/find.mjs","webpack:///./node_modules/graphql/jsutils/invariant.mjs","webpack:///./node_modules/graphql/type/directives.mjs","webpack:///./node_modules/graphql/type/schema.mjs","webpack:///./node_modules/graphql/language/kinds.mjs","webpack:///./node_modules/graphql/jsutils/isInvalid.mjs"],"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","isBlank","shift","pop","join","line","indent","leadingWhitespace","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","replace","syntaxError","source","position","description","GraphQLError","concat","body","name","locationOffset","this","column","devAssert","defineToStringTag","TokenKind","Object","freeze","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","COMMENT","createLexer","options","startOfFileToken","Tok","lexer","lastToken","token","lineStart","advance","advanceLexer","lookahead","kind","next","readToken","start","end","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toString","toUpperCase","bodyLength","pos","positionAfterWhitespace","col","charCodeAt","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","invalidSequence","rawValue","a","b","c","d","char2hex","defineToJSON","parse","parser","parseDocument","parseValue","expectToken","parseValueLiteral","parseType","type","parseTypeReference","Parser","sourceObj","inspect","_lexer","_options","_proto","prototype","parseName","loc","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","OPERATION_DEFINITION","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","VARIABLE_DEFINITION","variable","parseVariable","defaultValue","expectOptionalToken","VARIABLE","SELECTION_SET","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","FIELD","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","parseList","parseObject","parseStringLiteral","BOOLEAN","NULL","ENUM","block","_this","LIST","values","any","_this2","parseObjectField","OBJECT","fields","OBJECT_FIELD","push","parseDirective","DIRECTIVE","LIST_TYPE","NON_NULL_TYPE","NAMED_TYPE","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","startToken","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","call","endToken","flatMapMethod","Array","flatMap","list","fn","_i2","_item","isArray","NAME_RX","isValidNameError","node","test","isEqualType","typeA","typeB","ofType","isTypeSubTypeOf","schema","maybeSubType","superType","isPossibleType","doTypesOverlap","getPossibleTypes","some","validateSchema","__validationErrors","context","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","assertValidSchema","Error","map","error","message","SchemaValidationContext","_errors","reportError","_nodes","filter","Boolean","addError","queryType","getQueryType","getOperationTypeNode","astNode","mutationType","getMutationType","subscriptionType","getSubscriptionType","operationNodes","getAllSubNodes","_i4","_context$schema$getDi2","getDirectives","directive","validateName","argNames","create","_loop","_i6","_directive$args2","arg","argName","_ref","_ref2","__allowedLegacyNames","validateInputObjectCircularRefs","createInputObjectCircularRefsValidator","typeMap","getTypeMap","_i8","_objectValues2","objectValues","validateFields","validateObjectInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","getFields","getAllNodes","_i10","field","_loop2","_i12","_field$args2","_ref3","_ref4","object","implementedTypeNames","_i14","_object$getInterfaces2","getInterfaces","iface","getAllImplementsInterfaceNodes","validateObjectImplementsInterface","objectFieldMap","ifaceFieldMap","_i16","_objectEntries2","objectEntries","_ref6","fieldName","ifaceField","objectField","_loop3","_i18","_ifaceField$args2","ifaceArg","objectArg","find","_loop4","_i20","_objectField$args2","union","memberTypes","getTypes","includedTypeNames","_i22","memberType","getUnionMemberTypeNodes","enumType","enumValues","getValues","_i24","enumValue","valueName","inputObj","_i26","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","_i28","fieldType","cycleIndex","cyclePath","pathStr","fieldObj","extensionASTNodes","getter","typeNode","ifaceNode","typeName","unionNode","typeFromAST","innerType","getType","invariant","TypeInfo","getFieldDefFn","initialType","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","getParentType","getInputType","getParentInputType","getDefaultValue","getDirective","getArgument","getEnumValue","enter","namedType","fieldDef","parentType","typeConditionAST","outputType","inputType","argDef","argType","fieldOrDirective","listType","itemType","inputFieldType","inputField","objectType","getValue","leave","fieldNode","isExecutableDefinitionNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","nonExecutableDefinitionMessage","defName","ExecutableDefinitions","Document","_node$definitions2","definition","duplicateOperationNameMessage","operationName","UniqueOperationNames","knownOperationNames","OperationDefinition","FragmentDefinition","anonOperationNotAloneMessage","LoneAnonymousOperation","operationCount","singleFieldOnlyMessage","SingleFieldSubscriptions","MAX_SUGGESTIONS","didYouMean","firstArg","secondArg","subMessage","suggestions","selected","lastItem","suggestionList","input","optionsByDistance","inputThreshold","option","distance","lexicalDistance","threshold","Math","max","keys","sort","aStr","bStr","toLowerCase","aLength","bLength","j","_i3","_j","cost","min","unknownTypeMessage","suggestedTypes","x","KnownTypeNames","getSchema","existingTypesMap","definedTypes","_context$getDocument$2","getDocument","def","typeNames","NamedType","_1","parent","_2","ancestors","definitionNode","isSDL","isSDLNode","isSpecifiedScalarName","specifiedScalarsNames","inlineFragmentOnNonCompositeErrorMessage","fragmentOnNonCompositeErrorMessage","fragName","FragmentsOnCompositeTypes","InlineFragment","nonInputTypeOnVarMessage","variableName","VariablesAreInputTypes","VariableDefinition","noSubselectionAllowedMessage","requiredSubselectionMessage","ScalarLeafs","Field","undefinedFieldMessage","suggestedTypeNames","suggestedFieldNames","quotedTypeNames","quotedFieldNames","FieldsOnCorrectType","getSuggestedTypeNames","getSuggestedFieldNames","suggestedObjectTypes","interfaceUsageCount","_schema$getPossibleTy2","possibleType","_possibleType$getInte2","possibleInterface","suggestedInterfaceTypes","possibleFieldNames","duplicateFragmentNameMessage","UniqueFragmentNames","knownFragmentNames","fragmentName","unknownFragmentMessage","KnownFragmentNames","FragmentSpread","fragment","getFragment","unusedFragMessage","NoUnusedFragments","operationDefs","fragmentDefs","fragmentNameUsed","_context$getRecursive2","getRecursivelyReferencedFragments","fragmentDef","typeIncompatibleSpreadMessage","fragType","typeIncompatibleAnonSpreadMessage","PossibleFragmentSpreads","getFragmentType","frag","cycleErrorMessage","spreadNames","via","NoFragmentCycles","visitedFrags","spreadPath","spreadPathIndexByName","spreadNodes","getFragmentSpreads","spreadNode","spreadName","spreadFragment","fragmentNames","s","duplicateVariableMessage","UniqueVariableNames","knownVariableNames","undefinedVarMessage","varName","opName","NoUndefinedVariables","variableNameDefined","usages","getRecursiveVariableUsages","unusedVariableMessage","NoUnusedVariables","variableDefs","variableNameUsed","_variableDefs2","variableDef","unknownDirectiveMessage","directiveName","misplacedDirectiveMessage","location","KnownDirectives","locationsMap","definedDirectives","astDefinitions","Directive","key","path","candidateLocation","getDirectiveLocationForASTPath","appliedTo","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","parentNode","INPUT_FIELD_DEFINITION","ARGUMENT_DEFINITION","duplicateDirectiveMessage","UniqueDirectivesPerLocation","uniqueDirectiveMap","isRepeatable","knownDirectives","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","configurable","writable","unknownArgMessage","suggestedArgs","unknownDirectiveArgMessage","KnownArgumentNames","KnownArgumentNamesOnDirectives","Argument","argNode","knownArgsNames","directiveArgs","directiveNode","knownArgs","_directiveNode$argume2","duplicateArgMessage","UniqueArgumentNames","knownArgNames","badValueMessage","badEnumValueMessage","suggestedValues","requiredFieldMessage","fieldTypeName","unknownFieldMessage","suggestedFields","ValuesOfCorrectType","NullValue","ListValue","isValidScalar","ObjectValue","fieldNodeMap","keyMap","typeStr","ObjectField","EnumValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","isInvalid","allNames","missingFieldArgMessage","missingDirectiveArgMessage","ProvidedRequiredArguments","ProvidedRequiredArgumentsOnDirectives","argNodes","argNodeMap","_fieldDef$args2","requiredArgsMap","isRequiredArgumentNode","requiredArgs","_Object$keys2","badVarPosMessage","varType","expectedType","VariablesInAllowedPosition","varDefMap","varDef","allowedVariableUsage","varDefaultValue","locationDefaultValue","hasNonNullVariableDefaultValue","hasLocationDefaultValue","nullableLocationType","fieldsConflictMessage","responseName","reason","reasonMessage","subreason","OverlappingFieldsCanBeMerged","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","conflicts","findConflictsWithinSelectionSet","_ref2$","fields1","fields2","_getFieldsAndFragment","getFieldsAndFragmentNames","fieldMap","collectConflictsWithin","comparedFragments","collectConflictsBetweenFieldsAndFragment","collectConflictsBetweenFragments","areMutuallyExclusive","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","_getFieldsAndFragment2","_getFieldsAndFragment3","_comparedFragments","_i5","_ref5","conflict","findConflict","parentFieldsAreMutuallyExclusive","_i7","field1","field2","node1","def1","node2","def2","type1","type2","name1","name2","sameArguments","doTypesConflict","subfieldConflicts","arguments1","arguments2","every","argument1","argument2","argument","sameValue","value1","value2","cached","get","nodeAndDefs","_collectFieldsAndFragmentNames","set","fragmentType","_i9","_selectionSet$selecti2","selection","inlineFragmentType","reduce","allFields","_ref7","_ref8","_defKindToExtKind","_data","first","_pairSetAdd","data","duplicateInputFieldMessage","UniqueInputFieldNames","knownNameStack","knownNames","schemaDefinitionNotAloneMessage","canNotDefineSchemaWithinExtensionMessage","LoneSchemaDefinition","oldSchema","alreadyDefined","schemaDefinitionsCount","SchemaDefinition","duplicateOperationTypeMessage","existedOperationTypeMessage","UniqueOperationTypes","definedOperationTypes","existingOperationTypes","query","mutation","subscription","checkOperationTypes","SchemaExtension","operationType","alreadyDefinedOperationType","duplicateTypeNameMessage","existedTypeNameMessage","UniqueTypeNames","knownTypeNames","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","duplicateEnumValueNameMessage","existedEnumValueNameMessage","UniqueEnumValueNames","existingTypeMap","knownValueNames","checkValueUniqueness","EnumTypeExtension","valueNames","_node$values2","valueDef","existingType","duplicateFieldDefinitionNameMessage","existedFieldDefinitionNameMessage","UniqueFieldDefinitionNames","knownFieldNames","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeExtension","ObjectTypeExtension","fieldNames","_node$fields2","hasField","duplicateDirectiveNameMessage","existedDirectiveNameMessage","UniqueDirectiveNames","knownDirectiveNames","DirectiveDefinition","extendingUnknownTypeMessage","extendingDifferentTypeKindMessage","PossibleTypeExtensions","ScalarTypeExtension","checkExtension","UnionTypeExtension","defNode","expectedKind","defKindToExtKind","extensionKindToTypeName","_expectedKind","typeToExtKind","allTypeNames","specifiedRules","_inheritsLoose","subClass","superClass","constructor","__proto__","ASTValidationContext","ast","onError","_ast","_fragments","_fragmentSpreads","_recursivelyReferencedFragments","_onError","fragments","frags","statement","spreads","setsToVisit","_set$selections2","collectedNames","nodesToVisit","_this$getFragmentSpre2","spread","_ASTValidationContext2","ValidationContext","typeInfo","_typeInfo","_variableUsages","_recursiveVariableUsages","_proto3","getVariableUsages","newUsages","Variable","_this$getRecursivelyR2","validate","documentAST","rules","abortObj","maxErrors","visitor","rule","e","toObjMap","getPrototypeOf","DirectiveLocation","isNullish","astFromValue","astValue","valuesNodes","itemNode","isObjectLike","fieldNodes","fieldValue","serialized","serialize","stringNum","integerStringRegExp","TypeError","__Schema","__Type","resolve","__Directive","__DirectiveLocation","__InputValue","__TypeKind","TypeKind","NON_NULL","__Field","includeDeprecated","deprecationReason","possibleTypes","__EnumValue","inputFields","isDeprecated","inputVal","valueAST","SchemaMetaFieldDef","extensions","TypeMetaFieldDef","TypeNameMetaFieldDef","introspectionTypes","isIntrospectionType","QueryDocumentKeys","Name","ListType","NonNullType","OperationTypeDefinition","FieldDefinition","InputValueDefinition","EnumValueDefinition","BREAK","visit","root","visitorKeys","stack","inArray","index","edits","newRoot","isLeaving","isEdited","clone","k","editOffset","ii","editKey","editValue","splice","isNode","visitFn","getVisitFn","maybeNode","visitInParallel","visitors","skipping","visitWithTypeInfo","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor","nodejsCustomInspectSymbol","Symbol","for","getOperationAST","_documentAST$definiti2","valueFromAST","valueNode","variables","variableValue","coercedValues","_valueNode$values2","isMissingVariable","itemValue","coercedValue","coercedObj","_error","buildClientSchema","introspection","__schema","schemaIntrospection","keyValMap","typeIntrospection","buildType","stdType","getObjectType","buildDirective","assumeValid","allowedLegacyNames","typeRef","itemRef","nullableRef","nullableType","getNamedType","getOutputType","getInterfaceType","buildScalarDef","buildObjectDef","buildInterfaceDef","buildUnionDef","buildEnumDef","buildInputObjectDef","scalarIntrospection","objectIntrospection","buildFieldDefMap","interfaceIntrospection","unionIntrospection","enumIntrospection","valueIntrospection","inputObjectIntrospection","buildInputValueDefMap","fieldIntrospection","inputValueIntrospections","inputValue","buildInputValue","inputValueIntrospection","directiveIntrospection","keyFn","valFn","entries","classObject","toStringTag","mapValue","_key","_value","identityFunc","valueFromASTUntyped","parseInt","parseFloat","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","assertType","instanceOf","assertObjectType","assertInterfaceType","GraphQLList","GraphQLNonNull","isInputType","isWrappingType","isOutputType","isLeafType","isCompositeType","isAbstractType","assertNullableType","isNullableType","getNullableType","isNamedType","unwrappedType","resolveThunk","thunk","undefineIfEmpty","arr","GraphQLScalarType","config","toConfig","GraphQLObjectType","isTypeOf","_fields","defineFieldMap","bind","_interfaces","defineInterfaces","_proto2","fieldsToFieldsConfig","isPlainObj","fieldConfig","argsConfig","subscribe","argsToArgsConfig","isRequiredArgument","GraphQLInterfaceType","resolveType","GraphQLUnionType","_types","defineTypes","_proto4","GraphQLEnumType","_values","defineEnumValues","_valueLookup","_nameLookup","_proto5","_variables","valueMap","GraphQLInputObjectType","defineInputFieldMap","_proto6","isRequiredInputField","print","printDocASTReducer","op","varDefs","wrap","_ref9","_ref10","isBlockString","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","addDescription","_ref22","_ref23","_ref24","hasMultilineItems","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","cb","maybeArray","separator","array","maybeString","isMultiline","string","getLocation","match","lineRegexp","exec","printLocation","printSourceLocation","sourceLocation","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","locationLine","sublineIndex","floor","sublineColumnNum","sublines","printPrefixedLines","subline","existingLines","padLen","prefix","lpad","len","positions","originalError","_source","_locations","_positions","_extensions","originalExtensions","captureStackTrace","printError","output","_error$nodes2","_error$locations2","_typeof","iterator","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","formatValue","seenValues","formatObjectValue","previouslySeenValues","customInspectFn","getCustomFn","customValue","formatArray","formatObject","getObjectTag","properties","remaining","items","tag","condition","booleanCondition","toJSON","isFinitePolyfill","Number","isFinite","isInteger","MAX_INT","MIN_INT","serializeInt","num","coerceInt","GraphQLInt","serializeFloat","coerceFloat","GraphQLFloat","serializeObject","valueOf","valueOfResult","serializeString","coerceString","GraphQLString","serializeBoolean","coerceBoolean","GraphQLBoolean","serializeID","coerceID","GraphQLID","specifiedScalarTypes","predicate","isDirective","GraphQLDirective","GraphQLIncludeDirective","if","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","specifiedDirectives","isSchema","GraphQLSchema","assertSchema","_queryType","_mutationType","_subscriptionType","_directives","initialTypes","typeMapReducer","typeMapDirectiveReducer","_typeMap","_possibleTypeMap","_implementations","_type$getInterfaces2","impls","abstractType","_this$getPossibleType2","seenType","reducedMap","_objectValues4","fieldArgTypes","_objectValues6","_field","_map","Kind"],"mappings":"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","file":"js/yarn.graphql.3fa15352.js","sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n","// Workaround to make older Flow versions happy\nvar flatMapMethod = Array.prototype.flatMap;\n/* eslint-disable no-redeclare */\n// $FlowFixMe\n\nvar flatMap = flatMapMethod ? function (list, fn) {\n  return flatMapMethod.call(list, fn);\n} : function (list, fn) {\n  var result = [];\n\n  for (var _i2 = 0; _i2 < list.length; _i2++) {\n    var _item = list[_i2];\n    var value = fn(_item);\n\n    if (Array.isArray(value)) {\n      result = result.concat(value);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n};\nexport default flatMap;\n","import devAssert from '../jsutils/devAssert';\nimport { GraphQLError } from '../error/GraphQLError';\nvar NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  var error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name, node) {\n  typeof name === 'string' || devAssert(0, 'Expected string');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(\"Name \\\"\".concat(name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"), node);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(\"Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \\\"\".concat(name, \"\\\" does not.\"), node);\n  }\n}\n","import { isObjectType, isListType, isNonNullType, isAbstractType } from '../type/definition';\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\n\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, maybeSubType type may be a currently\n  // possible object type.\n\n\n  if (isAbstractType(superType) && isObjectType(maybeSubType) && schema.isPossibleType(superType, maybeSubType)) {\n    return true;\n  } // Otherwise, the child type is not a valid subtype of the parent type.\n\n\n  return false;\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(function (type) {\n        return schema.isPossibleType(typeB, type);\n      });\n    } // Determine if the latter type is a possible concrete type of the former.\n\n\n    return schema.isPossibleType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isPossibleType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n\n  return false;\n}\n","import find from '../polyfills/find';\nimport flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { assertSchema } from './schema';\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from './definition';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext =\n/*#__PURE__*/\nfunction () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n\n  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {\n    var node = operationNodes[_i2];\n\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {\n    var directive = _context$schema$getDi2[_i4];\n\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive && directive.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    var argNames = Object.create(null);\n\n    var _loop = function _loop(_i6, _directive$args2) {\n      var arg = _directive$args2[_i6];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per directive.\n\n      if (argNames[argName]) {\n        context.reportError(\"Argument @\".concat(directive.name, \"(\").concat(argName, \":) can only be defined once.\"), directive.astNode && directive.args.filter(function (_ref) {\n          var name = _ref.name;\n          return name === argName;\n        }).map(function (_ref2) {\n          var astNode = _ref2.astNode;\n          return astNode;\n        }));\n        return \"continue\";\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(argName, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n      }\n    };\n\n    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n      var _ret = _loop(_i6, _directive$args2);\n\n      if (_ret === \"continue\") continue;\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n\n  for (var _i8 = 0, _objectValues2 = objectValues(typeMap); _i8 < _objectValues2.length; _i8++) {\n    var type = _objectValues2[_i8];\n\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type && type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateObjectInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  for (var _i10 = 0; _i10 < fields.length; _i10++) {\n    var field = fields[_i10];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    } // Ensure the arguments are valid\n\n\n    var argNames = Object.create(null);\n\n    var _loop2 = function _loop2(_i12, _field$args2) {\n      var arg = _field$args2[_i12];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure they are unique per field.\n\n      if (argNames[argName]) {\n        context.reportError(\"Field argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) can only be defined once.\"), field.args.filter(function (_ref3) {\n          var name = _ref3.name;\n          return name === argName;\n        }).map(function (_ref4) {\n          var astNode = _ref4.astNode;\n          return astNode;\n        }));\n      }\n\n      argNames[argName] = true; // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), arg.astNode && arg.astNode.type);\n      }\n    };\n\n    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {\n      _loop2(_i12, _field$args2);\n    }\n  }\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n\n  for (var _i14 = 0, _object$getInterfaces2 = object.getInterfaces(); _i14 < _object$getInterfaces2.length; _i14++) {\n    var iface = _object$getInterfaces2[_i14];\n\n    if (!isInterfaceType(iface)) {\n      context.reportError(\"Type \".concat(inspect(object), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    if (implementedTypeNames[iface.name]) {\n      context.reportError(\"Type \".concat(object.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(object, iface));\n      continue;\n    }\n\n    implementedTypeNames[iface.name] = true;\n    validateObjectImplementsInterface(context, object, iface);\n  }\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  for (var _i16 = 0, _objectEntries2 = objectEntries(ifaceFieldMap); _i16 < _objectEntries2.length; _i16++) {\n    var _ref6 = _objectEntries2[_i16];\n    var fieldName = _ref6[0];\n    var ifaceField = _ref6[1];\n    var objectField = objectFieldMap[fieldName]; // Assert interface field exists on object.\n\n    if (!objectField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(object.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(object)));\n      continue;\n    } // Assert interface field type is satisfied by object field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(object.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(objectField.type), \".\"), [ifaceField.astNode && ifaceField.astNode.type, objectField.astNode && objectField.astNode.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _loop3 = function _loop3(_i18, _ifaceField$args2) {\n      var ifaceArg = _ifaceField$args2[_i18];\n      var argName = ifaceArg.name;\n      var objectArg = find(objectField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!objectArg) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(object.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, objectField.astNode]);\n        return \"continue\";\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, objectArg.type)) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(object.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(objectArg.type), \".\"), [ifaceArg.astNode && ifaceArg.astNode.type, objectArg.astNode && objectArg.astNode.type]);\n      } // TODO: validate default values?\n\n    };\n\n    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {\n      var _ret2 = _loop3(_i18, _ifaceField$args2);\n\n      if (_ret2 === \"continue\") continue;\n    } // Assert additional arguments must not be required.\n\n\n    var _loop4 = function _loop4(_i20, _objectField$args2) {\n      var objectArg = _objectField$args2[_i20];\n      var argName = objectArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isRequiredArgument(objectArg)) {\n        context.reportError(\"Object field \".concat(object.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [objectArg.astNode, ifaceField.astNode]);\n      }\n    };\n\n    for (var _i20 = 0, _objectField$args2 = objectField.args; _i20 < _objectField$args2.length; _i20++) {\n      _loop4(_i20, _objectField$args2);\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n\n  for (var _i22 = 0; _i22 < memberTypes.length; _i22++) {\n    var memberType = memberTypes[_i22];\n\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  for (var _i24 = 0; _i24 < enumValues.length; _i24++) {\n    var enumValue = enumValues[_i24];\n    var valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (var _i26 = 0; _i26 < fields.length; _i26++) {\n    var field = fields[_i26];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n\n    for (var _i28 = 0; _i28 < fields.length; _i28++) {\n      var field = fields[_i28];\n\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes || [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  return flatMap(getAllNodes(object), function (item) {\n    return getter(item) || [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\n","import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  /* istanbul ignore else */\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected type node: ' + inspect(typeNode));\n}\n","import find from '../polyfills/find';\nimport { Kind } from '../language/kinds';\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { typeFromAST } from './typeFromAST';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo =\n/*#__PURE__*/\nfunction () {\n  function TypeInfo(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant codebases. You should never need to use it.\n  // It may disappear in the future.\n  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals\n  // beginning somewhere other than documents.\n  initialType) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn || getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  var _proto = TypeInfo.prototype;\n\n  _proto.getType = function getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  };\n\n  _proto.getParentType = function getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  };\n\n  _proto.getInputType = function getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  };\n\n  _proto.getParentInputType = function getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  };\n\n  _proto.getFieldDef = function getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  };\n\n  _proto.getDefaultValue = function getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  };\n\n  _proto.getDirective = function getDirective() {\n    return this._directive;\n  };\n\n  _proto.getArgument = function getArgument() {\n    return this._argument;\n  };\n\n  _proto.getEnumValue = function getEnumValue() {\n    return this._enumValue;\n  };\n\n  _proto.enter = function enter(node) {\n    var schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        {\n          var namedType = getNamedType(this.getType());\n\n          this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n          break;\n        }\n\n      case Kind.FIELD:\n        {\n          var parentType = this.getParentType();\n          var fieldDef;\n          var fieldType;\n\n          if (parentType) {\n            fieldDef = this._getFieldDef(schema, parentType, node);\n\n            if (fieldDef) {\n              fieldType = fieldDef.type;\n            }\n          }\n\n          this._fieldDefStack.push(fieldDef);\n\n          this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n          break;\n        }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        {\n          var type;\n\n          if (node.operation === 'query') {\n            type = schema.getQueryType();\n          } else if (node.operation === 'mutation') {\n            type = schema.getMutationType();\n          } else if (node.operation === 'subscription') {\n            type = schema.getSubscriptionType();\n          }\n\n          this._typeStack.push(isObjectType(type) ? type : undefined);\n\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        {\n          var typeConditionAST = node.typeCondition;\n          var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n          this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n          break;\n        }\n\n      case Kind.VARIABLE_DEFINITION:\n        {\n          var inputType = typeFromAST(schema, node.type);\n\n          this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n          break;\n        }\n\n      case Kind.ARGUMENT:\n        {\n          var argDef;\n          var argType;\n          var fieldOrDirective = this.getDirective() || this.getFieldDef();\n\n          if (fieldOrDirective) {\n            argDef = find(fieldOrDirective.args, function (arg) {\n              return arg.name === node.name.value;\n            });\n\n            if (argDef) {\n              argType = argDef.type;\n            }\n          }\n\n          this._argument = argDef;\n\n          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n          break;\n        }\n\n      case Kind.LIST:\n        {\n          var listType = getNullableType(this.getInputType());\n          var itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n          this._defaultValueStack.push(undefined);\n\n          this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n          break;\n        }\n\n      case Kind.OBJECT_FIELD:\n        {\n          var objectType = getNamedType(this.getInputType());\n          var inputFieldType;\n          var inputField;\n\n          if (isInputObjectType(objectType)) {\n            inputField = objectType.getFields()[node.name.value];\n\n            if (inputField) {\n              inputFieldType = inputField.type;\n            }\n          }\n\n          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n          break;\n        }\n\n      case Kind.ENUM:\n        {\n          var enumType = getNamedType(this.getInputType());\n          var enumValue;\n\n          if (isEnumType(enumType)) {\n            enumValue = enumType.getValue(node.value);\n          }\n\n          this._enumValue = enumValue;\n          break;\n        }\n    }\n  };\n\n  _proto.leave = function leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  };\n\n  return TypeInfo;\n}();\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n","import { Kind } from './kinds';\nexport function isDefinitionNode(node) {\n  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);\n}\nexport function isExecutableDefinitionNode(node) {\n  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;\n}\nexport function isSelectionNode(node) {\n  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;\n}\nexport function isValueNode(node) {\n  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;\n}\nexport function isTypeNode(node) {\n  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;\n}\nexport function isTypeDefinitionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isExecutableDefinitionNode } from '../../language/predicates';\nexport function nonExecutableDefinitionMessage(defName) {\n  return \"The \".concat(defName, \" definition is not executable.\");\n}\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\n\nexport function ExecutableDefinitions(context) {\n  return {\n    Document: function Document(node) {\n      for (var _i2 = 0, _node$definitions2 = node.definitions; _i2 < _node$definitions2.length; _i2++) {\n        var definition = _node$definitions2[_i2];\n\n        if (!isExecutableDefinitionNode(definition)) {\n          context.reportError(new GraphQLError(nonExecutableDefinitionMessage(definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : definition.name.value), definition));\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationNameMessage(operationName) {\n  return \"There can be only one operation named \\\"\".concat(operationName, \"\\\".\");\n}\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\n\nexport function UniqueOperationNames(context) {\n  var knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      var operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(duplicateOperationNameMessage(operationName.value), [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition() {\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nexport function anonOperationNotAloneMessage() {\n  return 'This anonymous operation must be the only defined operation.';\n}\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\n\nexport function LoneAnonymousOperation(context) {\n  var operationCount = 0;\n  return {\n    Document: function Document(node) {\n      operationCount = node.definitions.filter(function (definition) {\n        return definition.kind === Kind.OPERATION_DEFINITION;\n      }).length;\n    },\n    OperationDefinition: function OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError(anonOperationNotAloneMessage(), node));\n      }\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function singleFieldOnlyMessage(name) {\n  return name ? \"Subscription \\\"\".concat(name, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.';\n}\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\n\nexport function SingleFieldSubscriptions(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new GraphQLError(singleFieldOnlyMessage(node.name && node.name.value), node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n  };\n}\n","var MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\n// eslint-disable-next-line no-redeclare\nexport default function didYouMean(firstArg, secondArg) {\n  var _ref = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg],\n      subMessage = _ref[0],\n      suggestions = _ref[1];\n\n  var message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  var selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  var lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n","/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n\n  for (var _i2 = 0; _i2 < options.length; _i2++) {\n    var option = options[_i2];\n    var distance = lexicalDistance(input, option);\n    var threshold = Math.max(inputThreshold, option.length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (var i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (var j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (var _i3 = 1; _i3 <= aLength; _i3++) {\n    for (var _j = 1; _j <= bLength; _j++) {\n      var cost = a[_i3 - 1] === b[_j - 1] ? 0 : 1;\n      d[_i3][_j] = Math.min(d[_i3 - 1][_j] + 1, d[_i3][_j - 1] + 1, d[_i3 - 1][_j - 1] + cost);\n\n      if (_i3 > 1 && _j > 1 && a[_i3 - 1] === b[_j - 2] && a[_i3 - 2] === b[_j - 1]) {\n        d[_i3][_j] = Math.min(d[_i3][_j], d[_i3 - 2][_j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n","import didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from '../../language/predicates';\nimport { specifiedScalarTypes } from '../../type/scalars';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  return \"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var definitionNode = ancestors[2] || parent;\n        var isSDL = isSDLNode(definitionNode);\n\n        if (isSDL && isSpecifiedScalarName(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? specifiedScalarsNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestedTypes), node));\n      }\n    }\n  };\n}\nvar specifiedScalarsNames = specifiedScalarTypes.map(function (type) {\n  return type.name;\n});\n\nfunction isSpecifiedScalarName(typeName) {\n  return specifiedScalarsNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return Boolean(value && !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value)));\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function inlineFragmentOnNonCompositeErrorMessage(type) {\n  return \"Fragment cannot condition on non composite type \\\"\".concat(type, \"\\\".\");\n}\nexport function fragmentOnNonCompositeErrorMessage(fragName, type) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot condition on non composite type \\\"\").concat(type, \"\\\".\");\n}\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\n\nexport function FragmentsOnCompositeTypes(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          context.reportError(new GraphQLError(inlineFragmentOnNonCompositeErrorMessage(print(typeCondition)), typeCondition));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        context.reportError(new GraphQLError(fragmentOnNonCompositeErrorMessage(node.name.value, print(node.typeCondition)), node.typeCondition));\n      }\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isInputType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function nonInputTypeOnVarMessage(variableName, typeName) {\n  return \"Variable \\\"$\".concat(variableName, \"\\\" cannot be non-input type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\n\nexport function VariablesAreInputTypes(context) {\n  return {\n    VariableDefinition: function VariableDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.type); // If the variable type is not an input type, return an error.\n\n      if (type && !isInputType(type)) {\n        var variableName = node.variable.name.value;\n        context.reportError(new GraphQLError(nonInputTypeOnVarMessage(variableName, print(node.type)), node.type));\n      }\n    }\n  };\n}\n","import inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { getNamedType, isLeafType } from '../../type/definition';\nexport function noSubselectionAllowedMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(type, \"\\\" has no subfields.\");\n}\nexport function requiredSubselectionMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" of type \\\"\").concat(type, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(fieldName, \" { ... }\\\"?\");\n}\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafs(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            context.reportError(new GraphQLError(noSubselectionAllowedMessage(node.name.value, inspect(type)), selectionSet));\n          }\n        } else if (!selectionSet) {\n          context.reportError(new GraphQLError(requiredSubselectionMessage(node.name.value, inspect(type)), node));\n        }\n      }\n    }\n  };\n}\n","import didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition';\nexport function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var quotedTypeNames = suggestedTypeNames.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  });\n  var quotedFieldNames = suggestedFieldNames.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  });\n  return \"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type, \"\\\".\") + (didYouMean('to use an inline fragment on', quotedTypeNames) || didYouMean(quotedFieldNames));\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\nexport function FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), node));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest\n * them, sorted by how often the type is referenced, starting with Interfaces.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (isAbstractType(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n\n    for (var _i2 = 0, _schema$getPossibleTy2 = schema.getPossibleTypes(type); _i2 < _schema$getPossibleTy2.length; _i2++) {\n      var possibleType = _schema$getPossibleTy2[_i2];\n\n      if (!possibleType.getFields()[fieldName]) {\n        continue;\n      } // This object type defines this field.\n\n\n      suggestedObjectTypes.push(possibleType.name);\n\n      for (var _i4 = 0, _possibleType$getInte2 = possibleType.getInterfaces(); _i4 < _possibleType$getInte2.length; _i4++) {\n        var possibleInterface = _possibleType$getInte2[_i4];\n\n        if (!possibleInterface.getFields()[fieldName]) {\n          continue;\n        } // This interface type defines this field.\n\n\n        interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n      }\n    } // Suggest interface types based on how common they are.\n\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateFragmentNameMessage(fragName) {\n  return \"There can be only one fragment named \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\n\nexport function UniqueFragmentNames(context) {\n  var knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(duplicateFragmentNameMessage(fragmentName), [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function unknownFragmentMessage(fragName) {\n  return \"Unknown fragment \\\"\".concat(fragName, \"\\\".\");\n}\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\n\nexport function KnownFragmentNames(context) {\n  return {\n    FragmentSpread: function FragmentSpread(node) {\n      var fragmentName = node.name.value;\n      var fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(unknownFragmentMessage(fragmentName), node.name));\n      }\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedFragMessage(fragName) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" is never used.\");\n}\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i2 = 0; _i2 < operationDefs.length; _i2++) {\n          var operation = operationDefs[_i2];\n\n          for (var _i4 = 0, _context$getRecursive2 = context.getRecursivelyReferencedFragments(operation); _i4 < _context$getRecursive2.length; _i4++) {\n            var fragment = _context$getRecursive2[_i4];\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (var _i6 = 0; _i6 < fragmentDefs.length; _i6++) {\n          var fragmentDef = fragmentDefs[_i6];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), fragmentDef));\n          }\n        }\n      }\n    }\n  };\n}\n","import inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { isCompositeType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nimport { doTypesOverlap } from '../../utilities/typeComparators';\nexport function typeIncompatibleSpreadMessage(fragName, parentType, fragType) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentType, \"\\\" can never be of type \\\"\").concat(fragType, \"\\\".\");\n}\nexport function typeIncompatibleAnonSpreadMessage(parentType, fragType) {\n  return \"Fragment cannot be spread here as objects of type \\\"\".concat(parentType, \"\\\" can never be of type \\\"\").concat(fragType, \"\\\".\");\n}\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\n\nexport function PossibleFragmentSpreads(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        context.reportError(new GraphQLError(typeIncompatibleAnonSpreadMessage(inspect(parentType), inspect(fragType)), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        context.reportError(new GraphQLError(typeIncompatibleSpreadMessage(fragName, inspect(parentType), inspect(fragType)), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return \"Cannot spread fragment \\\"\".concat(fragName, \"\\\" within itself\").concat(via, \".\");\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var _i2 = 0; _i2 < spreadNodes.length; _i2++) {\n      var spreadNode = spreadNodes[_i2];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var fragmentNames = cyclePath.slice(0, -1).map(function (s) {\n          return s.name.value;\n        });\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, fragmentNames), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function undefinedVarMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\");\n}\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\n\nexport function NoUndefinedVariables(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(undefinedVarMessage(varName, operation.name && operation.name.value), [node, operation]));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function unusedVariableMessage(varName, opName) {\n  return opName ? \"Variable \\\"$\".concat(varName, \"\\\" is never used in operation \\\"\").concat(opName, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is never used.\");\n}\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\n\nexport function NoUnusedVariables(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n        var opName = operation.name ? operation.name.value : null;\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (var _i4 = 0, _variableDefs2 = variableDefs; _i4 < _variableDefs2.length; _i4++) {\n          var variableDef = _variableDefs2[_i4];\n          var variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(unusedVariableMessage(variableName, opName), variableDef));\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { DirectiveLocation } from '../../language/directiveLocation';\nimport { specifiedDirectives } from '../../type/directives';\nexport function unknownDirectiveMessage(directiveName) {\n  return \"Unknown directive \\\"\".concat(directiveName, \"\\\".\");\n}\nexport function misplacedDirectiveMessage(directiveName, location) {\n  return \"Directive \\\"\".concat(directiveName, \"\\\" may not be used on \").concat(location, \".\");\n}\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\n\nexport function KnownDirectives(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(function (name) {\n        return name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: function Directive(node, key, parent, path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(unknownDirectiveMessage(name), node));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(misplacedDirectiveMessage(name, candidateLocation), node));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n\n  if (!Array.isArray(appliedTo)) {\n    switch (appliedTo.kind) {\n      case Kind.OPERATION_DEFINITION:\n        switch (appliedTo.operation) {\n          case 'query':\n            return DirectiveLocation.QUERY;\n\n          case 'mutation':\n            return DirectiveLocation.MUTATION;\n\n          case 'subscription':\n            return DirectiveLocation.SUBSCRIPTION;\n        }\n\n        break;\n\n      case Kind.FIELD:\n        return DirectiveLocation.FIELD;\n\n      case Kind.FRAGMENT_SPREAD:\n        return DirectiveLocation.FRAGMENT_SPREAD;\n\n      case Kind.INLINE_FRAGMENT:\n        return DirectiveLocation.INLINE_FRAGMENT;\n\n      case Kind.FRAGMENT_DEFINITION:\n        return DirectiveLocation.FRAGMENT_DEFINITION;\n\n      case Kind.VARIABLE_DEFINITION:\n        return DirectiveLocation.VARIABLE_DEFINITION;\n\n      case Kind.SCHEMA_DEFINITION:\n      case Kind.SCHEMA_EXTENSION:\n        return DirectiveLocation.SCHEMA;\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n      case Kind.SCALAR_TYPE_EXTENSION:\n        return DirectiveLocation.SCALAR;\n\n      case Kind.OBJECT_TYPE_DEFINITION:\n      case Kind.OBJECT_TYPE_EXTENSION:\n        return DirectiveLocation.OBJECT;\n\n      case Kind.FIELD_DEFINITION:\n        return DirectiveLocation.FIELD_DEFINITION;\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n      case Kind.INTERFACE_TYPE_EXTENSION:\n        return DirectiveLocation.INTERFACE;\n\n      case Kind.UNION_TYPE_DEFINITION:\n      case Kind.UNION_TYPE_EXTENSION:\n        return DirectiveLocation.UNION;\n\n      case Kind.ENUM_TYPE_DEFINITION:\n      case Kind.ENUM_TYPE_EXTENSION:\n        return DirectiveLocation.ENUM;\n\n      case Kind.ENUM_VALUE_DEFINITION:\n        return DirectiveLocation.ENUM_VALUE;\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n      case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n        return DirectiveLocation.INPUT_OBJECT;\n\n      case Kind.INPUT_VALUE_DEFINITION:\n        {\n          var parentNode = ancestors[ancestors.length - 3];\n          return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n        }\n    }\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { specifiedDirectives } from '../../type/directives';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at this location.\");\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      // so we cast so the rest of the code is well typed.\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n\n        for (var _i6 = 0; _i6 < directives.length; _i6++) {\n          var _directive = directives[_i6];\n          var directiveName = _directive.name.value;\n\n          if (uniqueDirectiveMap[directiveName]) {\n            if (knownDirectives[directiveName]) {\n              context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], _directive]));\n            } else {\n              knownDirectives[directiveName] = _directive;\n            }\n          }\n        }\n      }\n    }\n  };\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { specifiedDirectives } from '../../type/directives';\nexport function unknownArgMessage(argName, fieldName, typeName, suggestedArgs) {\n  return \"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(fieldName, \"\\\" of type \\\"\").concat(typeName, \"\\\".\") + didYouMean(suggestedArgs.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\nexport function unknownDirectiveArgMessage(argName, directiveName, suggestedArgs) {\n  return \"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestedArgs.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\n\nexport function KnownArgumentNames(context) {\n  return _objectSpread({}, KnownArgumentNamesOnDirectives(context), {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        context.reportError(new GraphQLError(unknownArgMessage(argName, fieldDef.name, parentType.name, suggestionList(argName, knownArgsNames)), argNode));\n      }\n    }\n  });\n} // @internal\n\nexport function KnownArgumentNamesOnDirectives(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i2 = 0; _i2 < definedDirectives.length; _i2++) {\n    var directive = definedDirectives[_i2];\n    directiveArgs[directive.name] = directive.args.map(function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i4 = 0; _i4 < astDefinitions.length; _i4++) {\n    var def = astDefinitions[_i4];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveArgs[def.name.value] = def.arguments ? def.arguments.map(function (arg) {\n        return arg.name.value;\n      }) : [];\n    }\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (var _i6 = 0, _directiveNode$argume2 = directiveNode.arguments; _i6 < _directiveNode$argume2.length; _i6++) {\n          var argNode = _directiveNode$argume2[_i6];\n          var argName = argNode.name.value;\n\n          if (knownArgs.indexOf(argName) === -1) {\n            var suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(unknownDirectiveArgMessage(argName, directiveName, suggestions), argNode));\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateArgMessage(argName) {\n  return \"There can be only one argument named \\\"\".concat(argName, \"\\\".\");\n}\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\n\nexport function UniqueArgumentNames(context) {\n  var knownArgNames = Object.create(null);\n  return {\n    Field: function Field() {\n      knownArgNames = Object.create(null);\n    },\n    Directive: function Directive() {\n      knownArgNames = Object.create(null);\n    },\n    Argument: function Argument(node) {\n      var argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(duplicateArgMessage(argName), [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","import objectValues from '../../polyfills/objectValues';\nimport keyMap from '../../jsutils/keyMap';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n        var fieldDef = _objectValues2[_i2];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport inspect from '../../jsutils/inspect';\nimport keyMap from '../../jsutils/keyMap';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { print } from '../../language/printer';\nimport { specifiedDirectives } from '../../type/directives';\nimport { isType, isRequiredArgument } from '../../type/definition';\nexport function missingFieldArgMessage(fieldName, argName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(type, \"\\\" is required, but it was not provided.\");\n}\nexport function missingDirectiveArgMessage(directiveName, argName, type) {\n  return \"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(type, \"\\\" is required, but it was not provided.\");\n}\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\n\nexport function ProvidedRequiredArguments(context) {\n  return _objectSpread({}, ProvidedRequiredArgumentsOnDirectives(context), {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        var argNodes = fieldNode.arguments || [];\n        var argNodeMap = keyMap(argNodes, function (arg) {\n          return arg.name.value;\n        });\n\n        for (var _i2 = 0, _fieldDef$args2 = fieldDef.args; _i2 < _fieldDef$args2.length; _i2++) {\n          var argDef = _fieldDef$args2[_i2];\n          var argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isRequiredArgument(argDef)) {\n            context.reportError(new GraphQLError(missingFieldArgMessage(fieldDef.name, argDef.name, inspect(argDef.type)), fieldNode));\n          }\n        }\n      }\n    }\n  });\n} // @internal\n\nexport function ProvidedRequiredArgumentsOnDirectives(context) {\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (var _i4 = 0; _i4 < definedDirectives.length; _i4++) {\n    var directive = definedDirectives[_i4];\n    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n      return arg.name;\n    });\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  for (var _i6 = 0; _i6 < astDefinitions.length; _i6++) {\n    var def = astDefinitions[_i6];\n\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      requiredArgsMap[def.name.value] = keyMap(def.arguments ? def.arguments.filter(isRequiredArgumentNode) : [], function (arg) {\n        return arg.name.value;\n      });\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var argNodes = directiveNode.arguments || [];\n          var argNodeMap = keyMap(argNodes, function (arg) {\n            return arg.name.value;\n          });\n\n          for (var _i8 = 0, _Object$keys2 = Object.keys(requiredArgs); _i8 < _Object$keys2.length; _i8++) {\n            var argName = _Object$keys2[_i8];\n\n            if (!argNodeMap[argName]) {\n              var argType = requiredArgs[argName].type;\n              context.reportError(new GraphQLError(missingDirectiveArgMessage(directiveName, argName, isType(argType) ? inspect(argType) : print(argType)), directiveNode));\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n","import inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isNonNullType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators';\nexport function badVarPosMessage(varName, varType, expectedType) {\n  return \"Variable \\\"$\".concat(varName, \"\\\" of type \\\"\").concat(varType, \"\\\" used in position expecting type \\\"\").concat(expectedType, \"\\\".\");\n}\n/**\n * Variables passed to field arguments conform to type\n */\n\nexport function VariablesInAllowedPosition(context) {\n  var varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        varDefMap = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        for (var _i2 = 0; _i2 < usages.length; _i2++) {\n          var _ref2 = usages[_i2];\n          var node = _ref2.node;\n          var type = _ref2.type;\n          var defaultValue = _ref2.defaultValue;\n          var varName = node.name.value;\n          var varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            var schema = context.getSchema();\n            var varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              context.reportError(new GraphQLError(badVarPosMessage(varName, inspect(varType), inspect(type)), [varDef, node]));\n            }\n          }\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    var hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    var hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    var nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n","import find from '../../polyfills/find';\nimport objectEntries from '../../polyfills/objectEntries';\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { print } from '../../language/printer';\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function fieldsConflictMessage(responseName, reason) {\n  return \"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(reason), \". \") + 'Use different aliases on the fields to fetch both if this was intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(subreason));\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i2 = 0; _i2 < conflicts.length; _i2++) {\n        var _ref3 = conflicts[_i2];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        context.reportError(new GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    var comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  // Memoize so a fragment is not compared for conflicts more than once.\n  if (comparedFragments[fragmentName]) {\n    return;\n  }\n\n  comparedFragments[fragmentName] = true;\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    var comparedFragments = Object.create(null);\n\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    var _comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i3 = 0; _i3 < fragmentNames1.length; _i3++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i3], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (var _i5 = 0, _objectEntries2 = objectEntries(fieldMap); _i5 < _objectEntries2.length; _i5++) {\n    var _ref5 = _objectEntries2[_i5];\n    var responseName = _ref5[0];\n    var fields = _ref5[1];\n\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (var i = 0; i < fields.length; i++) {\n        for (var j = i + 1; j < fields.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i7 = 0, _Object$keys2 = Object.keys(fieldMap1); _i7 < _Object$keys2.length; _i7++) {\n    var responseName = _Object$keys2[_i7];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2); // The return type for each field.\n\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\".concat(name1, \" and \").concat(name2, \" are different fields\")], [node1], [node2]];\n    } // Two field calls must have the same arguments.\n\n\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \".concat(inspect(type1), \" and \").concat(inspect(type2))], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var _i9 = 0, _selectionSet$selecti2 = selectionSet.selections; _i9 < _selectionSet$selecti2.length; _i9++) {\n    var selection = _selectionSet$selecti2[_i9];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet =\n/*#__PURE__*/\nfunction () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n\n  map[b] = areMutuallyExclusive;\n}\n","var _defKindToExtKind;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { isTypeDefinitionNode } from '../../language/predicates';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../../type/definition';\nexport function extendingUnknownTypeMessage(typeName, suggestedTypes) {\n  return \"Cannot extend type \\\"\".concat(typeName, \"\\\" because it is not defined.\") + didYouMean(suggestedTypes.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\nexport function extendingDifferentTypeKindMessage(typeName, kind) {\n  return \"Cannot extend non-\".concat(kind, \" type \\\"\").concat(typeName, \"\\\".\");\n}\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\n\nexport function PossibleTypeExtensions(context) {\n  var schema = context.getSchema();\n  var definedTypes = Object.create(null);\n\n  for (var _i2 = 0, _context$getDocument$2 = context.getDocument().definitions; _i2 < _context$getDocument$2.length; _i2++) {\n    var def = _context$getDocument$2[_i2];\n\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    var typeName = node.name.value;\n    var defNode = definedTypes[typeName];\n    var existingType = schema && schema.getType(typeName);\n\n    if (defNode) {\n      var expectedKind = defKindToExtKind[defNode.kind];\n\n      if (expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(expectedKind)), [defNode, node]));\n      }\n    } else if (existingType) {\n      var _expectedKind = typeToExtKind(existingType);\n\n      if (_expectedKind !== node.kind) {\n        context.reportError(new GraphQLError(extendingDifferentTypeKindMessage(typeName, extensionKindToTypeName(_expectedKind)), node));\n      }\n    } else {\n      var allTypeNames = Object.keys(definedTypes);\n\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n\n      var suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(extendingUnknownTypeMessage(typeName, suggestedTypes), node.name));\n    }\n  }\n}\nvar defKindToExtKind = (_defKindToExtKind = {}, _defineProperty(_defKindToExtKind, Kind.SCALAR_TYPE_DEFINITION, Kind.SCALAR_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.OBJECT_TYPE_DEFINITION, Kind.OBJECT_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INTERFACE_TYPE_DEFINITION, Kind.INTERFACE_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.UNION_TYPE_DEFINITION, Kind.UNION_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.ENUM_TYPE_DEFINITION, Kind.ENUM_TYPE_EXTENSION), _defineProperty(_defKindToExtKind, Kind.INPUT_OBJECT_TYPE_DEFINITION, Kind.INPUT_OBJECT_TYPE_EXTENSION), _defKindToExtKind);\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  } else if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  } else if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  } else if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  } else if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } else if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n\n    default:\n      return 'unknown type';\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateInputFieldMessage(fieldName) {\n  return \"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\");\n}\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\n\nexport function UniqueInputFieldNames(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        knownNames = knownNameStack.pop();\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(duplicateInputFieldMessage(fieldName), [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function schemaDefinitionNotAloneMessage() {\n  return 'Must provide only one schema definition.';\n}\nexport function canNotDefineSchemaWithinExtensionMessage() {\n  return 'Cannot define a new schema within a schema extension.';\n}\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\n\nexport function LoneSchemaDefinition(context) {\n  var oldSchema = context.getSchema();\n  var alreadyDefined = oldSchema && (oldSchema.astNode || oldSchema.getQueryType() || oldSchema.getMutationType() || oldSchema.getSubscriptionType());\n  var schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition: function SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError(canNotDefineSchemaWithinExtensionMessage(), node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError(schemaDefinitionNotAloneMessage(), node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n  };\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      for (var _i2 = 0, _ref2 = node.operationTypes || []; _i2 < _ref2.length; _i2++) {\n        var operationType = _ref2[_i2];\n        var operation = operationType.operation;\n        var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n        if (existingOperationTypes[operation]) {\n          context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n        } else if (alreadyDefinedOperationType) {\n          context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n        } else {\n          definedOperationTypes[operation] = operationType;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateTypeNameMessage(typeName) {\n  return \"There can be only one type named \\\"\".concat(typeName, \"\\\".\");\n}\nexport function existedTypeNameMessage(typeName) {\n  return \"Type \\\"\".concat(typeName, \"\\\" already exists in the schema. It cannot also be defined in this type definition.\");\n}\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\nexport function UniqueTypeNames(context) {\n  var knownTypeNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    var typeName = node.name.value;\n\n    if (schema && schema.getType(typeName)) {\n      context.reportError(new GraphQLError(existedTypeNameMessage(typeName), node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(duplicateTypeNameMessage(typeName), [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n\n      for (var _i2 = 0, _node$values2 = node.values; _i2 < _node$values2.length; _i2++) {\n        var valueDef = _node$values2[_i2];\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n\n      for (var _i2 = 0, _node$fields2 = node.fields; _i2 < _node$fields2.length; _i2++) {\n        var fieldDef = _node$fields2[_i2];\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n\n  return false;\n}\n","import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateDirectiveNameMessage(directiveName) {\n  return \"There can be only one directive named \\\"\".concat(directiveName, \"\\\".\");\n}\nexport function existedDirectiveNameMessage(directiveName) {\n  return \"Directive \\\"\".concat(directiveName, \"\\\" already exists in the schema. It cannot be redefined.\");\n}\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\n\nexport function UniqueDirectiveNames(context) {\n  var knownDirectiveNames = Object.create(null);\n  var schema = context.getSchema();\n  return {\n    DirectiveDefinition: function DirectiveDefinition(node) {\n      var directiveName = node.name.value;\n\n      if (schema && schema.getDirective(directiveName)) {\n        context.reportError(new GraphQLError(existedDirectiveNameMessage(directiveName), node.name));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new GraphQLError(duplicateDirectiveNameMessage(directiveName), [knownDirectiveNames[directiveName], node.name]));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n  };\n}\n","// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitions } from './rules/ExecutableDefinitions'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNames } from './rules/UniqueOperationNames'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperation } from './rules/LoneAnonymousOperation'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptions } from './rules/SingleFieldSubscriptions'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNames } from './rules/KnownTypeNames'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypes } from './rules/FragmentsOnCompositeTypes'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypes } from './rules/VariablesAreInputTypes'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafs } from './rules/ScalarLeafs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectType } from './rules/FieldsOnCorrectType'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNames } from './rules/UniqueFragmentNames'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNames } from './rules/KnownFragmentNames'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragments } from './rules/NoUnusedFragments'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreads } from './rules/PossibleFragmentSpreads'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCycles } from './rules/NoFragmentCycles'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNames } from './rules/UniqueVariableNames'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariables } from './rules/NoUndefinedVariables'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariables } from './rules/NoUnusedVariables'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectives } from './rules/KnownDirectives'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocation } from './rules/UniqueDirectivesPerLocation'; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNames, KnownArgumentNamesOnDirectives } from // @internal\n'./rules/KnownArgumentNames'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNames } from './rules/UniqueArgumentNames'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectType } from './rules/ValuesOfCorrectType'; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArguments, ProvidedRequiredArgumentsOnDirectives } from // @internal\n'./rules/ProvidedRequiredArguments'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPosition } from './rules/VariablesInAllowedPosition'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMerged } from './rules/OverlappingFieldsCanBeMerged'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNames } from './rules/UniqueInputFieldNames';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = Object.freeze([ExecutableDefinitions, UniqueOperationNames, LoneAnonymousOperation, SingleFieldSubscriptions, KnownTypeNames, FragmentsOnCompositeTypes, VariablesAreInputTypes, ScalarLeafs, FieldsOnCorrectType, UniqueFragmentNames, KnownFragmentNames, NoUnusedFragments, PossibleFragmentSpreads, NoFragmentCycles, UniqueVariableNames, NoUndefinedVariables, NoUnusedVariables, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNames, UniqueArgumentNames, ValuesOfCorrectType, ProvidedRequiredArguments, VariablesInAllowedPosition, OverlappingFieldsCanBeMerged, UniqueInputFieldNames]);\nimport { LoneSchemaDefinition } from './rules/LoneSchemaDefinition';\nimport { UniqueOperationTypes } from './rules/UniqueOperationTypes';\nimport { UniqueTypeNames } from './rules/UniqueTypeNames';\nimport { UniqueEnumValueNames } from './rules/UniqueEnumValueNames';\nimport { UniqueFieldDefinitionNames } from './rules/UniqueFieldDefinitionNames';\nimport { UniqueDirectiveNames } from './rules/UniqueDirectiveNames';\nimport { PossibleTypeExtensions } from './rules/PossibleTypeExtensions'; // @internal\n\nexport var specifiedSDLRules = Object.freeze([LoneSchemaDefinition, UniqueOperationTypes, UniqueTypeNames, UniqueEnumValueNames, UniqueFieldDefinitionNames, UniqueDirectiveNames, KnownTypeNames, KnownDirectives, UniqueDirectivesPerLocation, PossibleTypeExtensions, KnownArgumentNamesOnDirectives, UniqueArgumentNames, UniqueInputFieldNames, ProvidedRequiredArgumentsOnDirectives]);\n","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { Kind } from '../language/kinds';\nimport { visit, visitWithTypeInfo } from '../language/visitor';\nimport { TypeInfo } from '../utilities/TypeInfo';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport var ASTValidationContext =\n/*#__PURE__*/\nfunction () {\n  function ASTValidationContext(ast, onError) {\n    this._ast = ast;\n    this._errors = [];\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._errors.push(error);\n\n    if (this._onError) {\n      this._onError(error);\n    }\n  } // @deprecated: use onError callback instead - will be removed in v15.\n  ;\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  _proto.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {\n          var selection = _set$selections2[_i2];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n\n        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {\n          var spread = _this$getFragmentSpre2[_i4];\n          var fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext =\n/*#__PURE__*/\nfunction (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast, onError) || this;\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext =\n/*#__PURE__*/\nfunction (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {\n        var frag = _this$getRecursivelyR2[_i6];\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);\n","import devAssert from '../jsutils/devAssert';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { visit, visitInParallel, visitWithTypeInfo } from '../language/visitor';\nimport { assertValidSchema } from '../type/validate';\nimport { TypeInfo } from '../utilities/TypeInfo';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules';\nimport { SDLValidationContext, ValidationContext } from './ValidationContext';\nexport var ABORT_VALIDATION = Object.freeze({});\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedRules;\n  var typeInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TypeInfo(schema);\n  var options = arguments.length > 4 ? arguments[4] : undefined;\n  documentAST || devAssert(0, 'Must provide document'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  var abortObj = Object.freeze({});\n  var errors = [];\n  var maxErrors = options && options.maxErrors;\n  var context = new ValidationContext(schema, documentAST, typeInfo, function (error) {\n    if (maxErrors != null && errors.length >= maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  var visitor = visitInParallel(rules.map(function (rule) {\n    return rule(context);\n  })); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n} // @internal\n\nexport function validateSDL(documentAST, schemaToExtend) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : specifiedSDLRules;\n  var errors = [];\n  var context = new SDLValidationContext(documentAST, schemaToExtend, function (error) {\n    errors.push(error);\n  });\n  var visitors = rules.map(function (rule) {\n    return rule(context);\n  });\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  var errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  var errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n","import objectEntries from '../polyfills/objectEntries';\nexport default function toObjMap(obj) {\n  /* eslint-enable no-redeclare */\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  var map = Object.create(null);\n\n  for (var _i2 = 0, _objectEntries2 = objectEntries(obj); _i2 < _objectEntries2.length; _i2++) {\n    var _ref2 = _objectEntries2[_i2];\n    var key = _ref2[0];\n    var value = _ref2[1];\n    map[key] = value;\n  }\n\n  return map;\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","/**\n * Returns true if a value is null, undefined, or NaN.\n */\nexport default function isNullish(value) {\n  return value === null || value === undefined || value !== value;\n}\n","import { forEach, isCollection } from 'iterall';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isNullish from '../jsutils/isNullish';\nimport isInvalid from '../jsutils/isInvalid';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLID } from '../type/scalars';\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    var astValue = astFromValue(value, type.ofType);\n\n    if (astValue && astValue.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined, NaN\n\n\n  if (isInvalid(value)) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (isCollection(value)) {\n      var valuesNodes = [];\n      forEach(value, function (item) {\n        var itemNode = astFromValue(item, itemType);\n\n        if (itemNode) {\n          valuesNodes.push(itemNode);\n        }\n      });\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    var fieldNodes = [];\n\n    for (var _i2 = 0, _objectValues2 = objectValues(type.getFields()); _i2 < _objectValues2.length; _i2++) {\n      var field = _objectValues2[_i2];\n      var fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  }\n\n  /* istanbul ignore else */\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    var serialized = type.serialize(value);\n\n    if (isNullish(serialized)) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number') {\n      var stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));\n  } // Not reachable. All possible input types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nvar integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n","import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport { print } from '../language/printer';\nimport { DirectiveLocation } from '../language/directiveLocation';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { GraphQLObjectType, GraphQLEnumType, GraphQLList, GraphQLNonNull, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description: \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation))),\n        resolve: function resolve(obj) {\n          return obj.locations;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args;\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          } // Not reachable. All possible types have been considered.\n\n\n          /* istanbul ignore next */\n          invariant(false, \"Unexpected type: \\\"\".concat(inspect(type), \"\\\".\"));\n        }\n      },\n      name: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.name !== undefined ? obj.name : undefined;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description !== undefined ? obj.description : undefined;\n        }\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type,\n        resolve: function resolve(obj) {\n          return obj.ofType !== undefined ? obj.ofType : undefined;\n        }\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args;\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this input value.',\n        resolve: function resolve(inputVal) {\n          var valueAST = astFromValue(inputVal.defaultValue, inputVal.type);\n          return valueAST ? print(valueAST) : null;\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var TypeKind = Object.freeze({\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n});\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. `enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. `inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. `ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  },\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    description: undefined,\n    type: GraphQLNonNull(GraphQLString),\n    defaultValue: undefined,\n    extensions: undefined,\n    astNode: undefined\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  },\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  },\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport var introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && introspectionTypes.some(function (_ref8) {\n    var name = _ref8.name;\n    return type.name === name;\n  });\n}\n","import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n","/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */\n// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n// See: https://webpack.js.org/guides/production/\nexport default process.env.NODE_ENV === 'production' ? // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (value) {\n    var valueClass = value.constructor;\n    var className = constructor.name;\n\n    if (className && valueClass && valueClass.name === className) {\n      throw new Error(\"Cannot use \".concat(className, \" \\\"\").concat(value, \"\\\" from another module or realm.\\n\\nEnsure that there is only one instance of \\\"graphql\\\" in the node_modules\\ndirectory. If different versions of \\\"graphql\\\" are the dependencies of other\\nrelied on modules, use \\\"resolutions\\\" to ensure only one version is installed.\\n\\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\\n\\nDuplicate \\\"graphql\\\" modules cannot be used at the same time since different\\nversions may have different capabilities and behavior. The data from one\\nversion used in the function from another could produce confusing and\\nspurious results.\"));\n    }\n  }\n\n  return false;\n};\n","var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n","import { Kind } from '../language/kinds';\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {\n    var definition = _documentAST$definiti2[_i2];\n\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      if (!operationName) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (definition.name && definition.name.value === operationName) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n","import objectValues from '../polyfills/objectValues';\nimport keyMap from '../jsutils/keyMap';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n\n      for (var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++) {\n        var itemNode = _valueNode$values2[_i2];\n\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          var itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (isInvalid(itemValue)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n\n    for (var _i4 = 0, _objectValues2 = objectValues(type.getFields()); _i4 < _objectValues2.length; _i4++) {\n      var field = _objectValues2[_i4];\n      var fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (isInvalid(fieldValue)) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  /* istanbul ignore else */\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // Not reachable. All possible input types have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}\n","import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport keyValMap from '../jsutils/keyValMap';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { parseValue } from '../language/parser';\nimport { GraphQLDirective } from '../type/directives';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { introspectionTypes, TypeKind } from '../type/introspection';\nimport { GraphQLSchema } from '../type/schema';\nimport { isInputType, isOutputType, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, assertNullableType, assertObjectType, assertInterfaceType } from '../type/definition';\nimport { valueFromAST } from './valueFromAST';\n\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, 'Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ' + inspect(introspection)); // Get the schema from the introspection result.\n\n  var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  var typeMap = keyValMap(schemaIntrospection.types, function (typeIntrospection) {\n    return typeIntrospection.name;\n  }, function (typeIntrospection) {\n    return buildType(typeIntrospection);\n  });\n\n  for (var _i2 = 0, _ref2 = [].concat(specifiedScalarTypes, introspectionTypes); _i2 < _ref2.length; _i2++) {\n    var stdType = _ref2[_i2];\n\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives: directives,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      var itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      var nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      var nullableType = getType(nullableRef);\n      return GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    if (!typeRef.name) {\n      throw new Error('Unknown type reference: ' + inspect(typeRef));\n    }\n\n    return getNamedType(typeRef.name);\n  }\n\n  function getNamedType(typeName) {\n    var type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\"Invalid or incomplete schema, unknown type: \".concat(typeName, \". Ensure that a full introspection query is used in order to build a client schema.\"));\n    }\n\n    return type;\n  }\n\n  function getInputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isInputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide input type for arguments, but received: ' + inspect(type) + '.');\n  }\n\n  function getOutputType(typeRef) {\n    var type = getType(typeRef);\n\n    if (isOutputType(type)) {\n      return type;\n    }\n\n    throw new Error('Introspection must provide output type for fields, but received: ' + inspect(type) + '.');\n  }\n\n  function getObjectType(typeRef) {\n    var type = getType(typeRef);\n    return assertObjectType(type);\n  }\n\n  function getInterfaceType(typeRef) {\n    var type = getType(typeRef);\n    return assertInterfaceType(type);\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type && type.name && type.kind) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    throw new Error('Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema:' + inspect(type));\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description\n    });\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    if (!objectIntrospection.interfaces) {\n      throw new Error('Introspection result missing interfaces: ' + inspect(objectIntrospection));\n    }\n\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: function interfaces() {\n        return objectIntrospection.interfaces.map(getInterfaceType);\n      },\n      fields: function fields() {\n        return buildFieldDefMap(objectIntrospection);\n      }\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      fields: function fields() {\n        return buildFieldDefMap(interfaceIntrospection);\n      }\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      throw new Error('Introspection result missing possibleTypes: ' + inspect(unionIntrospection));\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: function types() {\n        return unionIntrospection.possibleTypes.map(getObjectType);\n      }\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      throw new Error('Introspection result missing enumValues: ' + inspect(enumIntrospection));\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, function (valueIntrospection) {\n        return valueIntrospection.name;\n      }, function (valueIntrospection) {\n        return {\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason\n        };\n      })\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      throw new Error('Introspection result missing inputFields: ' + inspect(inputObjectIntrospection));\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: function fields() {\n        return buildInputValueDefMap(inputObjectIntrospection.inputFields);\n      }\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error('Introspection result missing fields: ' + inspect(typeIntrospection));\n    }\n\n    return keyValMap(typeIntrospection.fields, function (fieldIntrospection) {\n      return fieldIntrospection.name;\n    }, function (fieldIntrospection) {\n      if (!fieldIntrospection.args) {\n        throw new Error('Introspection result missing field args: ' + inspect(fieldIntrospection));\n      }\n\n      return {\n        description: fieldIntrospection.description,\n        deprecationReason: fieldIntrospection.deprecationReason,\n        type: getOutputType(fieldIntrospection.type),\n        args: buildInputValueDefMap(fieldIntrospection.args)\n      };\n    });\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, function (inputValue) {\n      return inputValue.name;\n    }, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    var type = getInputType(inputValueIntrospection.type);\n    var defaultValue = inputValueIntrospection.defaultValue ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type: type,\n      defaultValue: defaultValue\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      throw new Error('Introspection result missing directive args: ' + inspect(directiveIntrospection));\n    }\n\n    if (!directiveIntrospection.locations) {\n      throw new Error('Introspection result missing directive locations: ' + inspect(directiveIntrospection));\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}\n","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: '555-1234', Jenny: '867-5309' }\n *     const phonesByName = keyValMap(\n *       phoneBook,\n *       entry => entry.name,\n *       entry => entry.num\n *     )\n *\n */\nexport default function keyValMap(list, keyFn, valFn) {\n  return list.reduce(function (map, item) {\n    map[keyFn(item)] = valFn(item);\n    return map;\n  }, Object.create(null));\n}\n","/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/5838\nvar objectEntries = Object.entries || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return [key, obj[key]];\n  });\n};\n\nexport default objectEntries;\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","import objectEntries from '../polyfills/objectEntries';\n\n/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport default function mapValue(map, fn) {\n  var result = Object.create(null);\n\n  for (var _i2 = 0, _objectEntries2 = objectEntries(map); _i2 < _objectEntries2.length; _i2++) {\n    var _ref2 = _objectEntries2[_i2];\n    var _key = _ref2[0];\n    var _value = _ref2[1];\n    result[_key] = fn(_value, _key);\n  }\n\n  return result;\n}\n","/**\n * Returns the first argument it receives.\n */\nexport default function identityFunc(x) {\n  return x;\n}\n","import inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyValMap from '../jsutils/keyValMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(function (node) {\n        return valueFromASTUntyped(node, variables);\n      });\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, function (field) {\n        return field.name.value;\n      }, function (field) {\n        return valueFromASTUntyped(field.value, variables);\n      });\n\n    case Kind.VARIABLE:\n      {\n        var variableName = valueNode.name.value;\n        return variables && !isInvalid(variables[variableName]) ? variables[variableName] : undefined;\n      }\n  } // Not reachable. All possible value nodes have been considered.\n\n\n  /* istanbul ignore next */\n  invariant(false, 'Unexpected value node: ' + inspect(valueNode));\n}\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport keyMap from '../jsutils/keyMap';\nimport mapValue from '../jsutils/mapValue';\nimport toObjMap from '../jsutils/toObjMap';\nimport devAssert from '../jsutils/devAssert';\nimport keyValMap from '../jsutils/keyValMap';\nimport instanceOf from '../jsutils/instanceOf';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport identityFunc from '../jsutils/identityFunc';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport { Kind } from '../language/kinds';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped';\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL type.\"));\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Scalar type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Object type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Interface type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Union type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Enum type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Input Object type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL List type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Non-Null type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL input type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL output type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL leaf type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL composite type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL abstract type.\"));\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n\n// eslint-disable-next-line no-redeclare\nexport function GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLList.prototype.toString = function toString() {\n  return '[' + String(this.ofType) + ']';\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\n\ndefineToStringTag(GraphQLList);\ndefineToJSON(GraphQLList);\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLNonNull.prototype.toString = function toString() {\n  return String(this.ofType) + '!';\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\n\ndefineToStringTag(GraphQLNonNull);\ndefineToJSON(GraphQLNonNull);\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL wrapping type.\"));\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL nullable type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL named type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  // $FlowFixMe(>=0.90.0)\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction undefineIfEmpty(arr) {\n  return arr && arr.length > 0 ? arr : undefined;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLScalarType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLScalarType(config) {\n    var parseValue = config.parseValue || identityFunc;\n    this.name = config.name;\n    this.description = config.description;\n    this.serialize = config.serialize || identityFunc;\n    this.parseValue = parseValue;\n\n    this.parseLiteral = config.parseLiteral || function (node) {\n      return parseValue(valueFromASTUntyped(node));\n    };\n\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"serialize\\\" function. If this custom Scalar is also used as an input type, ensure \\\"parseValue\\\" and \\\"parseLiteral\\\" functions are also provided.\"));\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(0, \"\".concat(this.name, \" must provide both \\\"parseValue\\\" and \\\"parseLiteral\\\" functions.\"));\n    }\n  }\n\n  var _proto = GraphQLScalarType.prototype;\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLScalarType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLScalarType);\ndefineToJSON(GraphQLScalarType);\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\nexport var GraphQLObjectType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"isTypeOf\\\" as a function, \") + \"but got: \".concat(inspect(config.isTypeOf), \".\"));\n  }\n\n  var _proto2 = GraphQLObjectType.prototype;\n\n  _proto2.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto2.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto2.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto2.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLObjectType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLObjectType);\ndefineToJSON(GraphQLObjectType);\n\nfunction defineInterfaces(config) {\n  var interfaces = resolveThunk(config.interfaces) || [];\n  Array.isArray(interfaces) || devAssert(0, \"\".concat(config.name, \" interfaces must be an Array or a function which returns an Array.\"));\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields) || {};\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    isPlainObj(fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field config must be an object\"));\n    !('isDeprecated' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field resolver must be a function if \") + \"provided, but got: \".concat(inspect(fieldConfig.resolve), \".\"));\n    var argsConfig = fieldConfig.args || {};\n    isPlainObj(argsConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" args must be an object with argument names as keys.\"));\n    var args = objectEntries(argsConfig).map(function (_ref) {\n      var argName = _ref[0],\n          arg = _ref[1];\n      return {\n        name: argName,\n        description: arg.description === undefined ? null : arg.description,\n        type: arg.type,\n        defaultValue: arg.defaultValue,\n        extensions: arg.extensions && toObjMap(arg.extensions),\n        astNode: arg.astNode\n      };\n    });\n    return _objectSpread({}, fieldConfig, {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: args,\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      isDeprecated: Boolean(fieldConfig.deprecationReason),\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    });\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, function (field) {\n    return {\n      description: field.description,\n      type: field.type,\n      args: argsToArgsConfig(field.args),\n      resolve: field.resolve,\n      subscribe: field.subscribe,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode\n    };\n  });\n}\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, function (arg) {\n    return arg.name;\n  }, function (arg) {\n    return {\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      extensions: arg.extensions,\n      astNode: arg.astNode\n    };\n  });\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\nexport var GraphQLInterfaceType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLInterfaceType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto3 = GraphQLInterfaceType.prototype;\n\n  _proto3.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto3.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto3.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInterfaceType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLInterfaceType);\ndefineToJSON(GraphQLInterfaceType);\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\nexport var GraphQLUnionType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLUnionType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._types = defineTypes.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto4 = GraphQLUnionType.prototype;\n\n  _proto4.getTypes = function getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  };\n\n  _proto4.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto4.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLUnionType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLUnionType);\ndefineToJSON(GraphQLUnionType);\n\nfunction defineTypes(config) {\n  var types = resolveThunk(config.types) || [];\n  Array.isArray(types) || devAssert(0, \"Must provide Array of types or a function which returns such an array for Union \".concat(config.name, \".\"));\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport var GraphQLEnumType\n/* <T> */\n=\n/*#__PURE__*/\nfunction () {\n  function GraphQLEnumType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(function (enumValue) {\n      return [enumValue.value, enumValue];\n    }));\n    this._nameLookup = keyMap(this._values, function (value) {\n      return value.name;\n    });\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto5 = GraphQLEnumType.prototype;\n\n  _proto5.getValues = function getValues() {\n    return this._values;\n  };\n\n  _proto5.getValue = function getValue(name) {\n    return this._nameLookup[name];\n  };\n\n  _proto5.serialize = function serialize(value) {\n    var enumValue = this._valueLookup.get(value);\n\n    if (enumValue) {\n      return enumValue.name;\n    }\n  };\n\n  _proto5.parseValue = function parseValue(value)\n  /* T */\n  {\n    if (typeof value === 'string') {\n      var enumValue = this.getValue(value);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind === Kind.ENUM) {\n      var enumValue = this.getValue(valueNode.value);\n\n      if (enumValue) {\n        return enumValue.value;\n      }\n    }\n  };\n\n  _proto5.toConfig = function toConfig() {\n    var values = keyValMap(this.getValues(), function (value) {\n      return value.name;\n    }, function (value) {\n      return {\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      values: values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto5.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLEnumType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLEnumType);\ndefineToJSON(GraphQLEnumType);\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(0, \"\".concat(typeName, \" values must be an object with value names as keys.\"));\n  return objectEntries(valueMap).map(function (_ref2) {\n    var valueName = _ref2[0],\n        value = _ref2[1];\n    isPlainObj(value) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" must refer to an object with a \\\"value\\\" key \") + \"representing an internal value but got: \".concat(inspect(value), \".\"));\n    !('isDeprecated' in value) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    return {\n      name: valueName,\n      description: value.description,\n      value: 'value' in value ? value.value : valueName,\n      isDeprecated: Boolean(value.deprecationReason),\n      deprecationReason: value.deprecationReason,\n      extensions: value.extensions && toObjMap(value.extensions),\n      astNode: value.astNode\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\nexport var GraphQLInputObjectType =\n/*#__PURE__*/\nfunction () {\n  function GraphQLInputObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineInputFieldMap.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto6 = GraphQLInputObjectType.prototype;\n\n  _proto6.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto6.toConfig = function toConfig() {\n    var fields = mapValue(this.getFields(), function (field) {\n      return {\n        description: field.description,\n        type: field.type,\n        defaultValue: field.defaultValue,\n        extensions: field.extensions,\n        astNode: field.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      fields: fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto6.toString = function toString() {\n    return this.name;\n  };\n\n  return GraphQLInputObjectType;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLInputObjectType);\ndefineToJSON(GraphQLInputObjectType);\n\nfunction defineInputFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields) || {};\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    !('resolve' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field has a resolve property, but Input Types cannot define resolvers.\"));\n    return _objectSpread({}, fieldConfig, {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    });\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n","import { visit } from './visitor';\nimport { printBlockString } from './blockString';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n} // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\nfunction isMultiline(string) {\n  return string.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray && maybeArray.some(isMultiline);\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nexport default function keyMap(list, keyFn) {\n  return list.reduce(function (map, item) {\n    map[keyFn(item)] = item;\n    return map;\n  }, Object.create(null));\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    // $FlowFixMe(>=0.90.0)\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/2221\nvar objectValues = Object.values || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n\nexport default objectValues;\n","/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/4441\nvar isFinitePolyfill = Number.isFinite || function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\n\nexport default isFinitePolyfill;\n","/* eslint-disable no-redeclare */\n// $FlowFixMe workaround for: https://github.com/facebook/flow/issues/4441\nvar isInteger = Number.isInteger || function (value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nexport default isInteger;\n","import isFinite from '../polyfills/isFinite';\nimport isInteger from '../polyfills/isInteger';\nimport inspect from '../jsutils/inspect';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { Kind } from '../language/kinds';\nimport { GraphQLScalarType, isScalarType } from './definition'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(value) {\n  if (isObjectLike(value)) {\n    if (typeof value.valueOf === 'function') {\n      var valueOfResult = value.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof value.toJSON === 'function') {\n      // $FlowFixMe(>=0.90.0)\n      return value.toJSON();\n    }\n  }\n\n  return value;\n}\n\nfunction serializeString(rawValue) {\n  var value = serializeObject(rawValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'true' : 'false';\n  }\n\n  if (isFinite(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(rawValue) {\n  var value = serializeObject(rawValue);\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return String(value);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(rawValue)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return isScalarType(type) && specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n}\n","/* eslint-disable no-redeclare */\n// $FlowFixMe\nvar find = Array.prototype.find ? function (list, predicate) {\n  return Array.prototype.find.call(list, predicate);\n} : function (list, predicate) {\n  for (var _i2 = 0; _i2 < list.length; _i2++) {\n    var value = list[_i2];\n\n    if (predicate(value)) {\n      return value;\n    }\n  }\n};\nexport default find;\n","export default function invariant(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message || 'Unexpected invariant triggered');\n  }\n}\n","import objectEntries from '../polyfills/objectEntries';\nimport inspect from '../jsutils/inspect';\nimport toObjMap from '../jsutils/toObjMap';\nimport devAssert from '../jsutils/devAssert';\nimport instanceOf from '../jsutils/instanceOf';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport { DirectiveLocation } from '../language/directiveLocation';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { argsToArgsConfig, GraphQLNonNull } from './definition';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective =\n/*#__PURE__*/\nfunction () {\n  function GraphQLDirective(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = config.isRepeatable != null && config.isRepeatable;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = config.args || {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = objectEntries(args).map(function (_ref) {\n      var argName = _ref[0],\n          arg = _ref[1];\n      return {\n        name: argName,\n        description: arg.description === undefined ? null : arg.description,\n        type: arg.type,\n        defaultValue: arg.defaultValue,\n        extensions: arg.extensions && toObjMap(arg.extensions),\n        astNode: arg.astNode\n      };\n    });\n  }\n\n  var _proto = GraphQLDirective.prototype;\n\n  _proto.toString = function toString() {\n    return '@' + this.name;\n  };\n\n  _proto.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  };\n\n  return GraphQLDirective;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLDirective);\ndefineToJSON(GraphQLDirective);\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax (as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective]);\nexport function isSpecifiedDirective(directive) {\n  return isDirective(directive) && specifiedDirectives.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === directive.name;\n  });\n}\n","import find from '../polyfills/find';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport toObjMap from '../jsutils/toObjMap';\nimport devAssert from '../jsutils/devAssert';\nimport instanceOf from '../jsutils/instanceOf';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport { __Schema } from './introspection';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, getNamedType } from './definition';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\"));\n  }\n\n  return schema;\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n *     const characterInterface = new GraphQLInterfaceType({\n *       name: 'Character',\n *       ...\n *     });\n *\n *     const humanType = new GraphQLObjectType({\n *       name: 'Human',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const droidType = new GraphQLObjectType({\n *       name: 'Droid',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const schema = new GraphQLSchema({\n *       query: new GraphQLObjectType({\n *         name: 'Query',\n *         fields: {\n *           hero: { type: characterInterface, ... },\n *         }\n *       }),\n *       ...\n *       // Since this schema references only the `Character` interface it's\n *       // necessary to explicitly list the types that implement it if\n *       // you want them to be included in the final schema.\n *       types: [humanType, droidType],\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema =\n/*#__PURE__*/\nfunction () {\n  // Used as a cache for validateSchema().\n  // Referenced by validateSchema().\n  function GraphQLSchema(config) {\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      this.__validationErrors = undefined; // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n\n      isObjectLike(config) || devAssert(0, 'Must provide configuration object.');\n      !config.types || Array.isArray(config.types) || devAssert(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\"));\n      !config.directives || Array.isArray(config.directives) || devAssert(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\"));\n      !config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames) || devAssert(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + \"\".concat(inspect(config.allowedLegacyNames), \".\"));\n    }\n\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this.__allowedLegacyNames = config.allowedLegacyNames || [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this._queryType, this._mutationType, this._subscriptionType, __Schema].concat(config.types); // Keep track of all types referenced within the schema.\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap;\n    this._possibleTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n\n    for (var _i2 = 0, _objectValues2 = objectValues(this._typeMap); _i2 < _objectValues2.length; _i2++) {\n      var type = _objectValues2[_i2];\n\n      if (isObjectType(type)) {\n        for (var _i4 = 0, _type$getInterfaces2 = type.getInterfaces(); _i4 < _type$getInterfaces2.length; _i4++) {\n          var iface = _type$getInterfaces2[_i4];\n\n          if (isInterfaceType(iface)) {\n            var impls = this._implementations[iface.name];\n\n            if (impls) {\n              impls.push(type);\n            } else {\n              this._implementations[iface.name] = [type];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name] || [];\n  };\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    if (this._possibleTypeMap[abstractType.name] == null) {\n      var map = Object.create(null);\n\n      for (var _i6 = 0, _this$getPossibleType2 = this.getPossibleTypes(abstractType); _i6 < _this$getPossibleType2.length; _i6++) {\n        var type = _this$getPossibleType2[_i6];\n        map[type.name] = true;\n      }\n\n      this._possibleTypeMap[abstractType.name] = map;\n    }\n\n    return Boolean(this._possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  _proto.toConfig = function toConfig() {\n    return {\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: objectValues(this.getTypeMap()),\n      directives: this.getDirectives().slice(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || [],\n      assumeValid: this.__validationErrors !== undefined,\n      allowedLegacyNames: this.__allowedLegacyNames\n    };\n  };\n\n  return GraphQLSchema;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLSchema);\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  var namedType = getNamedType(type);\n  var seenType = map[namedType.name];\n\n  if (seenType) {\n    if (seenType !== namedType) {\n      throw new Error(\"Schema must contain uniquely named types but contains multiple types named \\\"\".concat(namedType.name, \"\\\".\"));\n    }\n\n    return map;\n  }\n\n  map[namedType.name] = namedType;\n  var reducedMap = map;\n\n  if (isUnionType(namedType)) {\n    reducedMap = namedType.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(namedType)) {\n    reducedMap = namedType.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(namedType) || isInterfaceType(namedType)) {\n    for (var _i8 = 0, _objectValues4 = objectValues(namedType.getFields()); _i8 < _objectValues4.length; _i8++) {\n      var field = _objectValues4[_i8];\n      var fieldArgTypes = field.args.map(function (arg) {\n        return arg.type;\n      });\n      reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n      reducedMap = typeMapReducer(reducedMap, field.type);\n    }\n  }\n\n  if (isInputObjectType(namedType)) {\n    for (var _i10 = 0, _objectValues6 = objectValues(namedType.getFields()); _i10 < _objectValues6.length; _i10++) {\n      var _field = _objectValues6[_i10];\n      reducedMap = typeMapReducer(reducedMap, _field.type);\n    }\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","/**\n * Returns true if a value is undefined, or NaN.\n */\nexport default function isInvalid(value) {\n  return value === undefined || value !== value;\n}\n"],"sourceRoot":""}