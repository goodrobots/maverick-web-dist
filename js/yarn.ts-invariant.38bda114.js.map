{"version":3,"sources":["webpack:///./node_modules/ts-invariant/lib/invariant.esm.js"],"names":["genericMessage","_a","Object","setPrototypeOf","obj","proto","__proto__","InvariantError","_super","message","_this","call","this","framesToPop","name","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","warn","error","processStub","env","process","Function","atLeastWeTried"],"mappings":"oHAAA,gGAEIA,EAAiB,sBACjBC,EAAKC,OAAOC,eAAgBA,OAAwB,IAAPF,EAAgB,SAAUG,EAAKC,GAE5E,OADAD,EAAIE,UAAYD,EACTD,GACPH,EACAM,EAAgC,SAAUC,GAE1C,SAASD,EAAeE,QACJ,IAAZA,IAAsBA,EAAUT,GACpC,IAAIU,EAAQF,EAAOG,KAAKC,KAAyB,kBAAZH,EAC/BT,EAAiB,KAAOS,EAAU,6DAClCA,IAAYG,KAIlB,OAHAF,EAAMG,YAAc,EACpBH,EAAMI,KAAOd,EACbG,EAAeO,EAAOH,EAAeQ,WAC9BL,EAEX,OAXA,uBAAUH,EAAgBC,GAWnBD,EAZwB,CAajCS,OACF,SAASC,EAAUC,EAAWT,GAC1B,IAAKS,EACD,MAAM,IAAIX,EAAeE,GAGjC,SAASU,EAAkBC,GACvB,OAAO,WACH,OAAOC,QAAQD,GAAQE,MAAMD,QAASE,aAG9C,SAAWN,GACPA,EAAUO,KAAOL,EAAkB,QACnCF,EAAUQ,MAAQN,EAAkB,UAFxC,CAGGF,IAAcA,EAAY,KAM7B,IAAIS,EAAc,CAAEC,IAAK,IACzB,GAAuB,kBAAZC,EACPF,EAAcE,OAGd,IAIIC,SAAS,OAAQ,iBAAjBA,CAAmCH,GAEvC,MAAOI,O","file":"js/yarn.ts-invariant.38bda114.js","sourcesContent":["import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nfunction wrapConsoleMethod(method) {\r\n    return function () {\r\n        return console[method].apply(console, arguments);\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\n// However, because most ESM-to-CJS compilers will rewrite the process import\r\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\r\n// also attempt to define the stub globally when it is not already defined.\r\nvar processStub = { env: {} };\r\nif (typeof process === \"object\") {\r\n    processStub = process;\r\n}\r\nelse\r\n    try {\r\n        // Using Function to evaluate this assignment in global scope also escapes\r\n        // the strict mode of the current module, thereby allowing the assignment.\r\n        // Inspired by https://github.com/facebook/regenerator/pull/369.\r\n        Function(\"stub\", \"process = stub\")(processStub);\r\n    }\r\n    catch (atLeastWeTried) {\r\n        // The assignment can fail if a Content Security Policy heavy-handedly\r\n        // forbids Function usage. In those environments, developers should take\r\n        // extra care to replace process.env.NODE_ENV in their production builds,\r\n        // or define an appropriate global.process polyfill.\r\n    }\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n//# sourceMappingURL=invariant.esm.js.map\n"],"sourceRoot":""}