{"version":3,"sources":["webpack:///./node_modules/@techteamer/janus-api/src/plugin/StreamingJanusPlugin.js","webpack:///./node_modules/@techteamer/janus-api/src/Janus.js","webpack:///./node_modules/@techteamer/janus-api/src/plugin/VideoRoomPublisherJanusPlugin.js","webpack:///./node_modules/@techteamer/janus-api/src/WebSocket.js","webpack:///./node_modules/@techteamer/janus-api/src/JanusAdmin.js","webpack:///./node_modules/@techteamer/janus-api/src/plugin/EchoJanusPlugin.js","webpack:///./node_modules/@techteamer/janus-api/src/JanusPlugin.js","webpack:///./node_modules/@techteamer/janus-api/src/SdpHelper.js","webpack:///./node_modules/@techteamer/janus-api/src/plugin/VideoRoomListenerJanusPlugin.js","webpack:///./node_modules/@techteamer/janus-api/index.js","webpack:///./node_modules/@techteamer/janus-api/src/Config.js","webpack:///./node_modules/@techteamer/janus-api/src/plugin/RecordPlayJanusPlugin.js"],"names":["JanusPlugin","SdpHelper","StreamingJanusPlugin","logger","filterDirectCandidates","super","this","janusEchoBody","audio","video","pluginName","sdpHelper","parameters","body","Object","assign","request","transaction","then","data","json","error_code","error","Error","catch","err","id","permanent","Promise","resolve","reject","param","streaming","jsep","result","status","emit","sdp","message","candidate","isDirectCandidate","module","exports","WebSocket","uuid","ignoredErrorCodes","Janus","config","ws","undefined","isConnected","sessionId","transactions","pluginHandles","protocol","sendCreate","url","options","addEventListener","cleanup","keepAlive","janus","debug","replyType","send","JSON","stringify","event","onMessage","onClose","plugin","getAttachPayload","success","type","payload","timeoutMs","transactionId","setTimeout","session_id","parseInt","janusHandleId","handle_id","detach","messageEvent","parse","getTransaction","pluginData","plugindata","sender","pluginHandle","warn","webrtcState","reason","hangup","mediaState","receiving","slowLink","uplink","nacks","onmessage","code","includes","isScheduled","keepAliveIntervalMs","ignoreReplyType","prototype","hasOwnProperty","call","ret","_cleanupPlugins","_cleanupWebSocket","_cleanupTransactions","removeAllListeners","readyState","OPEN","close","keys","forEach","pluginId","SdpUtils","VideoRoomPublisherJanusPlugin","display","janusRoomId","janusRoomMemberId","janusRoomPrivateMemberId","offerSdp","answerSdp","rtpForwardVideoStreamId","rtpForwardAudioStreamId","rtpForwardDataStreamId","host","videoPortNumber","audioPortNumber","room","publisher_id","video_port","audio_port","rtp_stream","video_stream_id","audio_stream_id","data_stream_id","rtpSdp","splitSections","section","index","mid","getMid","rtp","parseRtpParameters","codec","codecs","payloadType","name","clockRate","push","stopRTPForwardStream","all","streamId","stream_id","bitrate","new_bitrate","Array","isArray","list","foundRoom","find","description","join","createRoom","ptype","private_id","publishers","record","videocodec","rec_dir","recordDirectory","videoorient_ext","videoOrientExt","firSeconds","fir_freq","offer","relayAudio","relayVideo","videoroom","unpublished","leaving","e","window","JanusAdmin","msg","admin_secret","secret","r","sessions","handles","handleId","info","EchoJanusPlugin","isMuted","echotest","destroyPlugin","sendData","EventEmitter","opaque_id","additionalFields","cause","constructor","medium","on","isReady","SDPUtils","allowedProfiles","sections","newSection","lines","splitLines","rtpSections","i","line","indexOf","map","l","j","length","rtpSection","parsed","parseRtpMap","fmtp","filter","shift","isAllowed","allowedProfile","RegExp","test","force","haveCandidates","haveNonDirectCandidates","startsWith","stack","candidateLine","parseCandidate","tcpType","VideoRoomListenerJanusPlugin","roomId","roomMemberPrivateId","remoteFeedId","janusRemoteFeedId","offerAudio","offerVideo","feed","offer_video","offer_audio","answer","started","RecordPlayJanusPlugin","JanusConfig","JanusAdminConfig","JanusRoomConfig","sessionListIntervalMs","videoBitrateMax","videoKeyframeInterval","recordplay"],"mappings":"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","file":"js/yarn.techteamer.0d8280a0.js","sourcesContent":["const JanusPlugin = require('../JanusPlugin')\nconst SdpHelper = require('../SdpHelper')\n\nclass StreamingJanusPlugin extends JanusPlugin {\n  constructor (logger, filterDirectCandidates = false) {\n    super(logger)\n    this.filterDirectCandidates = !!filterDirectCandidates\n    this.janusEchoBody = { audio: true, video: true }\n    this.pluginName = 'janus.plugin.streaming'\n    this.sdpHelper = new SdpHelper(this.logger)\n  }\n\n  /**\n   * Type param can be: rtp, rtsp, live, ondemand\n   *\n   * Common parameters:\n   *   - id: positive integer, optional, random will be used if not present\n   *   - name: string - optional\n   *   - description: string - optional\n   *   - audio: boolean - optional, default false\n   *   - video: boolean - optional, default false\n   *   - is_private: boolean, optional, default: false\n   *   - pin\n   *   - secret\n   *   - permanent\n   *\n   * Plus parameters:\n   *  - rtp:\n   *     - data: boolean - optional, default false\n   *     - collision\n   *     - srtpsuite\n   *     - srtpcrypto\n   *\n   *  - live: filename\n   *  - ondemand: filename\n   *  - rtsp: url, rtsp_user, rtsp_pwd, audiortpmap, audiofmtp, videortpmap, videofmtp, rtspiface\n   *\n   * @returns {Promise<T>}\n   */\n  create (parameters) {\n    const body = Object.assign(parameters, { request: 'create' })\n\n    return this.transaction('message', { body }, 'success').then(({ data, json }) => {\n      if (data.error_code) {\n        this.logger.error('StreamingJanusPlugin error while create', data)\n        throw new Error('StreamingJanusPlugin error while create')\n      }\n      return { data, json }\n    }).catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot create stream', err)\n      throw err\n    })\n  }\n\n  destroy (id, permanent = false) {\n    const body = { request: 'destroy', id, permanent }\n\n    return this.transaction('message', { body }, 'success').catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot destroy stream', err)\n      throw err\n    })\n  }\n\n  list () {\n    const body = { request: 'list' }\n\n    return this.transaction('message', { body }, 'success').catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot list streams', err)\n      throw err\n    })\n  }\n\n  watch (id) {\n    const body = { request: 'watch', id }\n\n    return new Promise((resolve, reject) => {\n      this.transaction('message', { body }, 'event').then((param) => {\n        const { data, json } = param || {}\n\n        if (!data || data.streaming !== 'event') {\n          this.logger.error('StreamingJanusPlugin watch error ', data, json)\n          throw new Error('StreamingJanusPlugin watch error')\n        }\n        if (!json.jsep) {\n          this.logger.error('StreamingJanusPlugin watch answer does not contains jsep', data, json)\n          throw new Error('StreamingJanusPlugin watch answer does not contains jsep')\n        }\n\n        if (data.result && data.result.status) {\n          this.emit('statusChange', data.result.status)\n        }\n\n        const jsep = json.jsep\n        if (this.filterDirectCandidates && jsep.sdp) {\n          jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n        }\n\n        this.emit('jsep', jsep)\n        resolve(jsep)\n      }).catch((err) => {\n        this.logger.error('StreamingJanusPlugin, cannot watch stream', err)\n        reject(err)\n      })\n    })\n  }\n\n  start (jsep) {\n    const body = { request: 'start' }\n    const message = { body }\n    if (jsep) {\n      message.jsep = jsep\n    }\n\n    return this.transaction('message', message, 'event').then(({ data, json }) => {\n      if (data.result && data.result.status) {\n        this.emit('statusChange', data.result.status)\n      }\n      return { data, json }\n    }).catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot start stream', err)\n      throw err\n    })\n  }\n\n  stop () {\n    const body = { request: 'stop' }\n\n    return this.transaction('message', { body }, 'event').then(({ data, json }) => {\n      if (data.result && data.result.status) {\n        this.emit('statusChange', data.result.status)\n      }\n      return { data, json }\n    }).catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot start stream', err)\n      throw err\n    })\n  }\n\n  pause () {\n    const body = { request: 'pause' }\n\n    return this.transaction('message', { body }, 'event').then(({ data, json }) => {\n      if (data.result && data.result.status) {\n        this.emit('statusChange', data.result.status)\n      }\n      return { data, json }\n    }).catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot start stream', err)\n      throw err\n    })\n  }\n\n  info (id) {\n    const body = { request: 'info', id }\n\n    return this.transaction('message', { body }, 'success').catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot start stream', err)\n      throw err\n    })\n  }\n\n  switch (id) {\n    const body = { request: 'switch', id }\n\n    return this.transaction('message', { body }, 'event').catch((err) => {\n      this.logger.error('StreamingJanusPlugin, cannot start stream', err)\n      throw err\n    })\n  }\n\n  onmessage (data, json) {\n    if (data && data.streaming === 'event' && data.result && data.result.status) {\n      this.emit('statusChange', data.result.status)\n    } else {\n      this.logger.error('StreamingJanusPlugin got unknown message', data, json)\n    }\n  }\n\n  candidate (candidate) {\n    if (this.filterDirectCandidates && candidate.candidate && this.sdpHelper.isDirectCandidate(candidate.candidate)) {\n      return\n    }\n\n    return this.transaction('trickle', { candidate })\n  }\n}\n\nmodule.exports = StreamingJanusPlugin\n","const WebSocket = require('./WebSocket')\nconst JanusPlugin = require('./JanusPlugin')\nconst uuid = require('uuid/v4')\n\nconst ignoredErrorCodes = [\n  458, // JANUS_ERROR_SESSION_NOT_FOUND\n  459 // JANUS_ERROR_HANDLE_NOT_FOUND\n]\n\nclass Janus {\n  constructor (config, logger) {\n    this.ws = undefined\n    this.isConnected = false\n    this.sessionId = undefined\n    this.logger = logger\n\n    this.transactions = {}\n    this.pluginHandles = {}\n\n    this.config = config\n    this.protocol = 'janus-protocol'\n    this.sendCreate = true\n  }\n\n  connect () {\n    if (this.isConnected) {\n      return Promise.resolve(this)\n    }\n\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.config.url, this.protocol, this.config.options)\n\n      this.ws.addEventListener('error', (err) => {\n        this.logger.error('Error connecting to the Janus WebSockets server...', err)\n        this.isConnected = false\n        reject(err)\n      })\n\n      this.ws.addEventListener('close', () => { this.cleanup() })\n\n      this.ws.addEventListener('open', () => {\n        if (!this.sendCreate) {\n          this.isConnected = true\n          this.keepAlive(true)\n          return resolve(this)\n        }\n\n        const transaction = uuid()\n        const request = { janus: 'create', transaction }\n\n        this.transactions[transaction] = {\n          resolve: (json) => {\n            if (json.janus !== 'success') {\n              this.logger.error('Cannot connect to Janus', json)\n              reject(json)\n              return\n            }\n\n            this.sessionId = json.data.id\n            this.isConnected = true\n            this.keepAlive(true)\n\n            this.logger.debug('Janus connected, sessionId: ', this.sessionId)\n\n            resolve(this)\n          },\n          reject,\n          replyType: 'success'\n        }\n\n        this.ws.send(JSON.stringify(request))\n      })\n\n      this.ws.addEventListener('message', (event) => { this.onMessage(event) })\n      this.ws.addEventListener('close', () => { this.onClose() })\n    })\n  }\n\n  /**\n   *\n   * @param {JanusPlugin} plugin\n   * @return {Promise}\n   * */\n  addPlugin (plugin) {\n    if (!(plugin instanceof JanusPlugin)) {\n      return Promise.reject(new Error('plugin is not a JanusPlugin'))\n    }\n\n    const request = plugin.getAttachPayload()\n\n    return this.transaction('attach', request, 'success').then((json) => {\n      if (json.janus !== 'success') {\n        this.logger.error('Cannot add plugin', json)\n        plugin.error(json)\n        throw new Error(json)\n      }\n\n      this.pluginHandles[json.data.id] = plugin\n\n      return plugin.success(this, json.data.id)\n    })\n  }\n\n  transaction (type, payload, replyType, timeoutMs) {\n    if (!replyType) {\n      replyType = 'ack'\n    }\n    const transactionId = uuid()\n\n    return new Promise((resolve, reject) => {\n      if (timeoutMs) {\n        setTimeout(() => {\n          reject(new Error('Transaction timed out after ' + timeoutMs + ' ms'))\n        }, timeoutMs)\n      }\n\n      if (!this.isConnected) {\n        reject(new Error('Janus is not connected'))\n        return\n      }\n\n      const request = Object.assign({}, payload, {\n        janus: type,\n        session_id: (payload && parseInt(payload.session_id, 10)) || this.sessionId,\n        transaction: transactionId\n      })\n\n      this.transactions[request.transaction] = { resolve, reject, replyType, request }\n      this.ws.send(JSON.stringify(request))\n    })\n  }\n\n  send (type, payload) {\n    return new Promise((resolve, reject) => {\n      if (!this.isConnected) {\n        reject(new Error('Janus is not connected'))\n        return\n      }\n\n      const request = Object.assign({}, payload, {\n        janus: type,\n        session_id: this.sessionId,\n        transaction: uuid()\n      })\n\n      this.logger.debug('Janus sending', request)\n      this.ws.send(JSON.stringify(request), {}, (err) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  destroy () {\n    if (!this.isConnected) {\n      return Promise.resolve()\n    }\n\n    return this.transaction('destroy', {}, 'success', 5000).then(() => {\n      this.cleanup()\n    }).catch(() => {\n      this.cleanup()\n    })\n  }\n\n  destroyPlugin (plugin) {\n    return new Promise((resolve, reject) => {\n      if (!(plugin instanceof JanusPlugin)) {\n        reject(new Error('plugin is not a JanusPlugin'))\n        return\n      }\n\n      if (!this.pluginHandles[plugin.janusHandleId]) {\n        reject(new Error('unknown plugin'))\n        return\n      }\n\n      this.transaction('detach', { plugin: plugin.pluginName, handle_id: plugin.janusHandleId }, 'success', 5000).then(() => {\n        delete this.pluginHandles[plugin.pluginName]\n        plugin.detach()\n\n        resolve()\n      }).catch((err) => {\n        delete this.pluginHandles[plugin.pluginName]\n        plugin.detach()\n\n        reject(err)\n      })\n    })\n  }\n\n  onMessage (messageEvent) {\n    let json\n    try {\n      json = JSON.parse(messageEvent.data)\n    } catch (err) {\n      this.logger.error('cannot parse message', messageEvent.data)\n      return\n    }\n\n    // this.logger.debug('JANUS GOT', json)\n    if (json.janus === 'timeout' && json.session_id !== this.sessionId) {\n      this.logger.debug('GOT timeout from another websocket') // seems like a bug in janus timeout handler :)\n      return\n    }\n\n    if (json.janus === 'keepalive') { // Do nothing\n      return\n    }\n\n    if (json.janus === 'ack') { // Just an ack, we can probably ignore\n      const transaction = this.getTransaction(json)\n      if (transaction && transaction.resolve) {\n        transaction.resolve(json)\n      }\n      return\n    }\n\n    if (json.janus === 'success') { // Success!\n      const transaction = this.getTransaction(json)\n      if (!transaction) {\n        return\n      }\n\n      const pluginData = json.plugindata\n      if (pluginData === undefined || pluginData === null) {\n        transaction.resolve(json)\n        return\n      }\n\n      const sender = json.sender\n      if (!sender) {\n        transaction.resolve(json)\n        this.logger.error('Missing sender for plugindata', json)\n        return\n      }\n\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', json)\n        return\n      }\n\n      transaction.resolve({ data: pluginData.data, json })\n      return\n    }\n\n    if (json.janus === 'webrtcup') { // The PeerConnection with the gateway is up! Notify this\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', sender)\n        return\n      }\n      pluginHandle.webrtcState(true)\n      return\n    }\n\n    if (json.janus === 'hangup') { // A plugin asked the core to hangup a PeerConnection on one of our handles\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', sender)\n        return\n      }\n      pluginHandle.webrtcState(false, json.reason)\n      pluginHandle.hangup()\n      return\n    }\n\n    if (json.janus === 'detached') { // A plugin asked the core to detach one of our handles\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      return\n    }\n\n    if (json.janus === 'media') { // Media started/stopped flowing\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', sender)\n        return\n      }\n      pluginHandle.mediaState(json.type, json.receiving)\n      return\n    }\n\n    if (json.janus === 'slowlink') { // Trouble uplink or downlink\n      this.logger.debug('Got a slowlink event on session ' + this.sessionId)\n      this.logger.debug(json)\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', sender)\n        return\n      }\n      pluginHandle.slowLink(json.uplink, json.nacks)\n      return\n    }\n\n    if (json.janus === 'error') { // Oops, something wrong happened\n      if (json.error && json.error.code && !ignoredErrorCodes.includes(json.error.code)) {\n        this.logger.error('Janus error response' + json)\n      }\n\n      const transaction = this.getTransaction(json, true)\n      if (transaction && transaction.reject) {\n        if (transaction.request) {\n          this.logger.debug('Janus Error: rejecting transaction', transaction.request, json)\n        }\n        transaction.reject(json)\n      }\n      return\n    }\n\n    if (json.janus === 'event') {\n      const sender = json.sender\n      if (!sender) {\n        this.logger.warn('Missing sender...')\n        return\n      }\n      const pluginData = json.plugindata\n      if (pluginData === undefined || pluginData === null) {\n        this.logger.error('Missing plugindata...')\n        return\n      }\n\n      const pluginHandle = this.pluginHandles[sender]\n      if (!pluginHandle) {\n        this.logger.error('This handle is not attached to this session', sender)\n        return\n      }\n\n      const data = pluginData.data\n      const transaction = this.getTransaction(json)\n      if (transaction) {\n        if (data.error_code) {\n          transaction.reject({ data, json })\n        } else {\n          transaction.resolve({ data, json })\n        }\n        return\n      }\n\n      pluginHandle.onmessage(data, json)\n      return\n    }\n\n    this.logger.warn('Unknown message/event ' + json.janus + ' on session ' + this.sessionId)\n    this.logger.debug(json)\n  }\n\n  onClose () {\n    if (!this.isConnected) {\n      return\n    }\n\n    this.isConnected = false\n    this.logger.error('Lost connection to the gateway (is it down?)')\n  }\n\n  keepAlive (isScheduled) {\n    if (!this.ws || !this.isConnected || !this.sessionId) {\n      return\n    }\n\n    if (isScheduled) {\n      setTimeout(() => { this.keepAlive() }, this.config.keepAliveIntervalMs)\n    } else {\n      // logger.debug('Sending Janus keepalive')\n      this.transaction('keepalive').then(() => {\n        setTimeout(() => { this.keepAlive() }, this.config.keepAliveIntervalMs)\n      }).catch((err) => {\n        this.logger.warn('Janus keepalive error', err)\n      })\n    }\n  }\n\n  getTransaction (json, ignoreReplyType = false) {\n    const type = json.janus\n    const transactionId = json.transaction\n    if (\n      transactionId &&\n      Object.prototype.hasOwnProperty.call(this.transactions, transactionId) &&\n      (ignoreReplyType || this.transactions[transactionId].replyType === type)\n    ) {\n      const ret = this.transactions[transactionId]\n      delete this.transactions[transactionId]\n      return ret\n    }\n  }\n\n  cleanup () {\n    this._cleanupPlugins()\n    this._cleanupWebSocket()\n    this._cleanupTransactions()\n  }\n\n  _cleanupWebSocket () {\n    if (this.ws) {\n      this.ws.removeAllListeners()\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.close()\n      }\n    }\n    this.ws = undefined\n    this.isConnected = false\n  }\n\n  _cleanupPlugins () {\n    Object.keys(this.pluginHandles).forEach((pluginId) => {\n      const plugin = this.pluginHandles[pluginId]\n      delete this.pluginHandles[pluginId]\n      plugin.detach()\n    })\n  }\n\n  _cleanupTransactions () {\n    Object.keys(this.transactions).forEach((transactionId) => {\n      const transaction = this.transactions[transactionId]\n      if (transaction.reject) {\n        transaction.reject()\n      }\n    })\n    this.transactions = {}\n  }\n}\n\nmodule.exports = Janus\n","const JanusPlugin = require('../JanusPlugin')\nconst SdpHelper = require('../SdpHelper')\nconst SdpUtils = require('sdp')\n\nclass VideoRoomPublisherJanusPlugin extends JanusPlugin {\n  constructor (config, display, logger, filterDirectCandidates = false) {\n    if (!config) {\n      throw new Error('unknown config')\n    }\n\n    super(logger)\n    this.display = display\n    this.pluginName = 'janus.plugin.videoroom'\n\n    this.janusRoomId = undefined\n    this.janusRoomMemberId = undefined\n    this.janusRoomPrivateMemberId = undefined\n\n    this.filterDirectCandidates = !!filterDirectCandidates\n\n    this.config = config\n    this.sdpHelper = new SdpHelper(this.logger)\n\n    this.offerSdp = undefined\n    this.answerSdp = undefined\n\n    this.rtpForwardVideoStreamId = undefined\n    this.rtpForwardAudioStreamId = undefined\n    this.rtpForwardDataStreamId = undefined\n  }\n\n  /**\n   * Usage: ffmpeg -analyzeduration 300M -probesize 300M -protocol_whitelist file,udp,rtp -i sdp.file  -c:v h264 -c:a aac -ar 16k -ac 1 -g 50 -max_muxing_queue_size 9999 -preset ultrafast -tune zerolatency  -f flv rtmp://127.0.0.1:1935/mytv/stream\n   */\n  startRTPForward (host, videoPortNumber, audioPortNumber) {\n    const body = {\n      request: 'rtp_forward',\n      room: this.janusRoomId,\n      publisher_id: this.janusRoomMemberId,\n      host: host\n    }\n\n    if (videoPortNumber) {\n      body.video_port = videoPortNumber\n    }\n    if (audioPortNumber) {\n      body.audio_port = audioPortNumber\n    }\n\n    return this.transaction('message', { body }, 'success').then(({ data, json }) => {\n      if (data && data.rtp_stream && data.rtp_stream.video_stream_id) {\n        this.rtpForwardVideoStreamId = data.rtp_stream.video_stream_id\n      }\n      if (data && data.rtp_stream && data.rtp_stream.audio_stream_id) {\n        this.rtpForwardAudioStreamId = data.rtp_stream.audio_stream_id\n      }\n      if (data && data.rtp_stream && data.rtp_stream.data_stream_id) {\n        this.rtpForwardDataStreamId = data.rtp_stream.data_stream_id\n      }\n\n      let rtpSdp = 'v=0\\n' +\n        `o=- 0 0 IN IP4 ${host}\\n` +\n        `s=janus-api:${this.janusRoomId}.${this.janusRoomMemberId}\\n` +\n        `c=IN IP4 ${host}\\n` +\n        't=0 0\\n' +\n        'a=tool:janus-api\\n'\n\n      SdpUtils.splitSections(this.answerSdp).forEach((section, index) => {\n        if (index === 0) {\n          return // session part\n        }\n\n        const mid = SdpUtils.getMid(section)\n        const rtp = SdpUtils.parseRtpParameters(section)\n\n        const codec = rtp.codecs[0]\n        if (!codec) {\n          return\n        }\n\n        if (mid === 'video' && videoPortNumber) {\n          rtpSdp +=\n            `m=video ${videoPortNumber} RTP/AVP ${codec.payloadType}\\n` +\n            `a=rtpmap:${codec.payloadType} ${codec.name}/${codec.clockRate}\\n` +\n            'a=fmtp:11 packetization-mode=1\\n' +\n            'a=rtcp-mux\\n'\n        }\n        if (mid === 'audio' && audioPortNumber) {\n          rtpSdp +=\n            `m=audio ${audioPortNumber} RTP/AVP ${codec.payloadType}\\n` +\n            `a=rtpmap:${codec.payloadType} ${codec.name}/${codec.clockRate}\\n` +\n            'a=fmtp:11 packetization-mode=1\\n' +\n            'a=rtcp-mux\\n'\n        }\n      })\n\n      return rtpSdp\n    }).catch((err) => {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot RTP forward', err)\n      throw err\n    })\n  }\n\n  stopRTPForward () {\n    const ret = []\n    if (this.rtpForwardVideoStreamId) {\n      ret.push(this.stopRTPForwardStream(this.rtpForwardVideoStreamId))\n    }\n    if (this.rtpForwardAudioStreamId) {\n      ret.push(this.stopRTPForwardStream(this.rtpForwardAudioStreamId))\n    }\n    if (this.rtpForwardDataStreamId) {\n      ret.push(this.stopRTPForwardStream(this.rtpForwardDataStreamId))\n    }\n\n    return Promise.all(ret)\n  }\n\n  stopRTPForwardStream (streamId) {\n    const body = {\n      request: 'stop_rtp_forward',\n      room: this.janusRoomId,\n      publisher_id: this.janusRoomMemberId,\n      stream_id: streamId\n    }\n\n    return this.transaction('message', { body }, 'success').catch((err) => {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot stop RTP forward', err)\n      throw err\n    })\n  }\n\n  setRoomBitrate (bitrate) {\n    const body = {\n      request: 'edit',\n      room: this.janusRoomId,\n      new_bitrate: bitrate\n    }\n\n    return this.transaction('message', { body }, 'success').catch((err) => {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot set room bitrate', err)\n      throw err\n    })\n  }\n\n  connect () {\n    return this.transaction('message', { body: { request: 'list' } }, 'success').then((param) => {\n      const { data } = param || {}\n      if (!data || !Array.isArray(data.list)) {\n        this.logger.error('VideoRoomPublisherJanusPlugin, could not find roomList', data)\n        throw new Error('VideoRoomPublisherJanusPlugin, could not find roomList')\n      }\n\n      const foundRoom = data.list.find((room) => room.description === '' + this.config.id)\n      if (foundRoom) {\n        this.janusRoomId = foundRoom.room\n        return this.join()\n      } else {\n        return this.createRoom()\n      }\n    }).catch((err) => {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot list rooms', err)\n      throw err\n    })\n  }\n\n  join () {\n    const body = { request: 'join', room: this.janusRoomId, ptype: 'publisher', display: this.display }\n\n    return new Promise((resolve, reject) => {\n      this.transaction('message', { body }, 'event').then((param) => {\n        const { data } = param || {}\n        if (!data || !data.id || !data.private_id || !data.publishers) {\n          this.logger.error('VideoRoomPublisherJanusPlugin, could not join room', data)\n          throw new Error('VideoRoomPublisherJanusPlugin, could not join room')\n        }\n        this.janusRoomMemberId = data.id\n        this.janusRoomPrivateMemberId = data.private_id\n\n        resolve(data.publishers)\n      }).catch((err) => {\n        if (err && err.error_code === 426) { // JANUS_VIDEOROOM_ERROR_NO_SUCH_ROOM = 426\n          this.createRoom().then(resolve).catch(reject)\n        } else {\n          this.logger.error('VideoRoomPublisherJanusPlugin, unknown error connecting to room', err)\n          reject(err)\n        }\n      })\n    })\n  }\n\n  createRoom () {\n    const body = {\n      request: 'create',\n      description: '' + this.config.id,\n      record: this.config.record,\n      videocodec: this.config.codec,\n      rec_dir: this.config.recordDirectory,\n      publishers: this.config.publishers,\n      videoorient_ext: this.config.videoOrientExt\n    }\n\n    if (this.config.bitrate) {\n      body.bitrate = this.config.bitrate\n    }\n    if (this.config.firSeconds) {\n      body.fir_freq = this.config.firSeconds\n    }\n\n    return this.transaction('message', { body }, 'success').then((param) => {\n      const { data } = param || {}\n      if (!data || !data.room) {\n        this.logger.error('VideoRoomPublisherJanusPlugin, could not create room', data)\n        throw new Error('VideoRoomPublisherJanusPlugin, could not create room')\n      }\n\n      this.janusRoomId = data.room\n\n      return this.join()\n    }).catch((err) => {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot create room', err)\n      throw err\n    })\n  }\n\n  configure (offer, relayAudio = true, relayVideo = true) {\n    if (!this.janusRoomMemberId) {\n      this.logger.error('VideoRoomPublisherJanusPlugin, cannot configure without janusRoomMemberId')\n      return\n    }\n\n    const body = { request: 'configure', audio: relayAudio, video: relayVideo }\n\n    const jsep = offer\n    if (this.filterDirectCandidates && jsep.sdp) {\n      jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n    }\n\n    this.offerSdp = jsep.sdp\n\n    return this.transaction('message', { body, jsep }, 'event').then((param) => {\n      const { json } = param || {}\n      if (!json.jsep) {\n        throw new Error('cannot configure')\n      }\n\n      const jsep = json.jsep\n      if (this.filterDirectCandidates && jsep.sdp) {\n        jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n      }\n\n      this.answerSdp = jsep.sdp\n\n      return jsep\n    })\n  }\n\n  candidate (candidate) {\n    if (this.filterDirectCandidates && candidate.candidate && this.sdpHelper.isDirectCandidate(candidate.candidate)) {\n      return\n    }\n\n    return this.transaction('trickle', { candidate })\n  }\n\n  onmessage (data, json) {\n    // TODO data.videoroom === 'destroyed' handling\n    // TODO unpublished === 'ok' handling : we are unpublished\n\n    const { videoroom, room, unpublished, leaving, publishers } = data\n\n    if (!data || !videoroom || videoroom !== 'event') {\n      this.logger.error('VideoRoomPublisherJanusPlugin got unknown message', json)\n      return\n    }\n    if (room !== this.janusRoomId) {\n      this.logger.error('VideoRoomPublisherJanusPlugin got unknown roomId', this.janusRoomId, json)\n      return\n    }\n\n    if (unpublished) {\n      this.emit('remoteMemberUnpublished', unpublished)\n    } else if (leaving) {\n      this.emit('remoteMemberLeaving', leaving)\n    } else if (Array.isArray(publishers)) {\n      this.emit('publishersUpdated', publishers)\n    } else {\n      this.logger.error('VideoRoomPublisherJanusPlugin got unknown event', json)\n    }\n  }\n}\n\nmodule.exports = VideoRoomPublisherJanusPlugin\n","/**\n *  This module is for mocking ws library in browsers\n */\n\nlet WebSocket\n\ntry {\n  WebSocket = require('ws')\n} catch (e) {\n  // this is browser\n  window.WebSocket.prototype.removeAllListeners = () => { }\n}\n\nmodule.exports = WebSocket || window.WebSocket\n","const Janus = require('./Janus')\n\nclass JanusAdmin extends Janus {\n  /**\n   *\n   * @param config\n   * @param logger\n   */\n  constructor (config, logger) {\n    super(config, logger)\n    this.config = config\n    this.protocol = 'janus-admin-protocol'\n    this.sendCreate = false\n  }\n\n  transaction (type, payload, replyType) {\n    const msg = Object.assign({}, payload, {\n      admin_secret: this.config.secret\n    })\n    return super.transaction(type, msg, replyType || 'success')\n  }\n\n  listSessions () {\n    return this.transaction('list_sessions').then(r => r.sessions)\n  }\n\n  listHandles (sessionId) {\n    return this.transaction('list_handles', {\n      session_id: sessionId\n    }).then(r => r.handles)\n  }\n\n  handleInfo (sessionId, handleId) {\n    return this.transaction('handle_info', {\n      session_id: sessionId,\n      handle_id: handleId\n    }).then(r => r.info)\n  }\n}\n\nmodule.exports = JanusAdmin\n","const JanusPlugin = require('../JanusPlugin')\nconst SdpHelper = require('../SdpHelper')\n\nclass EchoJanusPlugin extends JanusPlugin {\n  constructor (logger, filterDirectCandidates = false) {\n    super(logger)\n    this.filterDirectCandidates = !!filterDirectCandidates\n    this.janusEchoBody = { audio: true, video: true }\n    this.pluginName = 'janus.plugin.echotest'\n    this.sdpHelper = new SdpHelper(this.logger)\n  }\n\n  mute (isMuted = false) {\n    return this.transaction('message', { audio: !isMuted }, 'success').catch((err) => {\n      this.logger.error('EchoJanusPlugin, cannot mute', err)\n      throw err\n    })\n  }\n\n  connect () {\n    return this.transaction('message', { body: this.janusEchoBody }, 'event').catch((err) => {\n      this.logger.error('EchoJanusPlugin error during connect', err)\n      throw err\n    })\n  }\n\n  onmessage (data, json) {\n    if (data && data.echotest === 'event' && data.result === 'done') {\n      // okay, so the echo test has ended\n      this.janus.destroyPlugin(this).catch((err) => {\n        this.logger.error('EchoJanusPlugin, destroyPlugin error in onmessage', err)\n      })\n    } else {\n      this.logger.error('EchoJanusPlugin got unknown message', data, json)\n    }\n  }\n\n  consume (data) {\n    if (data.type === 'message') {\n      const sendData = { jsep: data.message.jsep, body: this.janusEchoBody }\n      return this.transaction('message', sendData, 'event').then((ret) => {\n        const { json } = ret\n        if (!json || !json.jsep) {\n          this.logger.error('EchoJanusPlugin, no jsep in the transaction reply', ret)\n          return\n        }\n\n        const jsep = json.jsep\n        if (this.filterDirectCandidates && jsep.sdp) {\n          jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n        }\n\n        this.emit('jsep', jsep)\n      }).catch((err) => {\n        this.logger.error('EchoJanusPlugin, message error in consume', err)\n        throw err\n      })\n    } else if (data.type === 'candidate') {\n      if (this.filterDirectCandidates && data.message.candidate && this.sdpHelper.isDirectCandidate(data.message.candidate)) {\n        return Promise.resolve()\n      }\n      return this.transaction('trickle', { candidate: data.message }).catch((err) => {\n        this.logger.error('EchoJanusPlugin, candidate error in consume', err)\n        throw err\n      })\n    } else {\n      this.logger.error('EchoTransportSession unknown data type', data)\n      return Promise.reject(new Error('EchoTransportSession unknown data type'))\n    }\n  }\n}\n\nmodule.exports = EchoJanusPlugin\n","const uuid = require('uuid/v4')\nconst EventEmitter = require('events')\n\nclass JanusPlugin extends EventEmitter {\n  constructor (logger) {\n    super()\n    this.id = uuid()\n    /** @var Janus */\n    this.janus = undefined\n    this.janusHandleId = undefined\n    this.pluginName = undefined\n    this.logger = logger\n  }\n\n  getAttachPayload () {\n    return { plugin: this.pluginName, opaque_id: this.id }\n  }\n\n  transaction (message, additionalFields, replyType) {\n    const payload = Object.assign({}, additionalFields, { handle_id: this.janusHandleId })\n\n    if (!this.janus) {\n      return Promise.reject(new Error('JanusPlugin is not connected'))\n    }\n\n    return this.janus.transaction(message, payload, replyType)\n  }\n\n  success (janus, janusHandleId) {\n    this.janus = janus\n    this.janusHandleId = janusHandleId\n\n    return this\n  }\n\n  error (cause) {\n    // Couldn't attach to the plugin\n  }\n\n  onmessage (data, json) {\n    this.logger.error('Unhandled message from janus in a plugin: ' + this.constructor.name, data, json)\n  }\n\n  oncleanup () {\n    // PeerConnection with the plugin closed, clean the UI\n    // The plugin handle is still valid so we can create a new one\n  }\n\n  detached () {\n    // Connection with the plugin closed, get rid of its features\n    // The plugin handle is not valid anymore\n  }\n\n  hangup () {\n    this.emit('hangup')\n  }\n\n  slowLink () {\n    this.emit('slowlink')\n  }\n\n  mediaState (medium, on) {\n    this.emit('mediaState', medium, on)\n  }\n\n  webrtcState (isReady, cause) {\n    this.emit('webrtcState', isReady, cause)\n  }\n\n  detach () {\n    this.removeAllListeners()\n    this.janus = null\n  }\n}\n\nmodule.exports = JanusPlugin\n","const SDPUtils = require('sdp')\n\nclass SdpHelper {\n  constructor (logger) {\n    this.logger = logger\n  }\n\n  /**\n   * @param sdp string\n   * @param allowedProfiles array[]|string|Regexp\n   */\n  filterH264Profiles (sdp, allowedProfiles) {\n    const sections = SDPUtils.splitSections(sdp)\n\n    const ret = []\n    for (const section of sections) {\n      if (SDPUtils.getMid(section) === 'video') {\n        const newSection = []\n        const lines = SDPUtils.splitLines(section)\n        const rtpSections = [[]]\n        let i = 0\n\n        for (const line of lines) {\n          if (line.indexOf('a=rtpmap:') === 0) {\n            rtpSections.push([])\n            i++\n          }\n          rtpSections[i].push(line)\n        }\n\n        rtpSections[0].map(l => newSection.push(l))\n        for (let j = 1; j < rtpSections.length; j++) {\n          const rtpSection = rtpSections[j]\n          const parsed = SDPUtils.parseRtpMap(rtpSection[0])\n\n          if (parsed && parsed.name === 'H264') {\n            const fmtp = rtpSection.filter(l => l.indexOf('a=fmtp:') === 0).shift()\n\n            let isAllowed = false\n            if (Array.isArray(allowedProfiles)) {\n              for (const allowedProfile of allowedProfiles) {\n                isAllowed = isAllowed || fmtp.indexOf('profile-level-id=' + allowedProfile) !== -1\n              }\n            } else if (typeof allowedProfiles === 'string') {\n              isAllowed = fmtp.indexOf('profile-level-id=' + allowedProfiles) !== -1\n            } else if (allowedProfiles instanceof RegExp) {\n              isAllowed = allowedProfiles.test(fmtp)\n            }\n\n            if (isAllowed) {\n              rtpSections[j].map(l => newSection.push(l))\n            }\n          } else {\n            rtpSections[j].map(l => newSection.push(l))\n          }\n        }\n\n        newSection.map(l => ret.push(l))\n      } else {\n        SDPUtils.splitLines(section).map(l => ret.push(l))\n      }\n    }\n\n    return ret.join('\\r\\n') + '\\r\\n'\n  }\n\n  filterDirectCandidates (sdp, force = false) {\n    const lines = SDPUtils.splitLines(sdp)\n\n    const ret = []\n    let haveCandidates = false\n    let haveNonDirectCandidates = false\n    for (const line of lines) {\n      if (line.startsWith('a=candidate')) {\n        haveCandidates = true\n        if (!this.isDirectCandidate(line)) {\n          ret.push(line)\n          haveNonDirectCandidates = true\n        }\n      } else {\n        ret.push(line)\n      }\n    }\n\n    // only remove _all_ candidates if its a forced request\n    if (haveCandidates && !haveNonDirectCandidates && !force) {\n      this.logger.warn('SDP NO OTHER CANDIDATES THAN DIRECT CANDIDATES', sdp, new Error().stack)\n      return sdp\n    }\n\n    if (haveCandidates && !haveNonDirectCandidates) {\n      this.logger.error('SDP DIRECT CANDIDATES FILTERED OUT BUT NO OTHER CANDIDATES IN SDP', sdp, new Error().stack)\n    }\n\n    return ret.join('\\r\\n') + '\\r\\n'\n  }\n\n  isDirectCandidate (candidateLine) {\n    const candidate = SDPUtils.parseCandidate(candidateLine)\n    return candidate.type === 'host' || candidate.type === 'srflx' || candidate.tcpType === 'host' || candidate.tcpType === 'srflx'\n  }\n}\n\nmodule.exports = SdpHelper\n","const JanusPlugin = require('../JanusPlugin')\nconst SdpHelper = require('../SdpHelper')\n\nclass VideoRoomListenerJanusPlugin extends JanusPlugin {\n  constructor (roomId, janusRoomId, roomMemberPrivateId, remoteFeedId, logger, filterDirectCandidates = false) {\n    if (!roomId) {\n      throw new Error('unknown roomId')\n    }\n    if (!roomMemberPrivateId) {\n      throw new Error('unknown janusRoomPrivateMemberId')\n    }\n\n    super(logger)\n    this.roomId = roomId\n    this.janusRoomId = janusRoomId\n    this.pluginName = 'janus.plugin.videoroom'\n    this.janusRoomPrivateMemberId = roomMemberPrivateId\n    this.janusRemoteFeedId = remoteFeedId\n    this.filterDirectCandidates = !!filterDirectCandidates\n    this.sdpHelper = new SdpHelper(this.logger)\n  }\n\n  join (offerAudio = true, offerVideo = true) {\n    const join = {\n      request: 'join',\n      room: this.janusRoomId,\n      ptype: 'listener',\n      feed: this.janusRemoteFeedId,\n      private_id: this.janusRoomPrivateMemberId,\n      offer_video: offerVideo,\n      offer_audio: offerAudio\n    }\n\n    return new Promise((resolve, reject) => {\n      this.transaction('message', { body: join }, 'event').then((param) => {\n        const { data, json } = param || {}\n        if (!data || data.videoroom !== 'attached') {\n          this.logger.error('VideoRoomListenerJanusPlugin join answer is not attached', data, json)\n          throw new Error('VideoRoomListenerJanusPlugin join answer is not attached')\n        }\n        if (!json.jsep) {\n          this.logger.error('VideoRoomListenerJanusPlugin join answer does not contains jsep', data, json)\n          throw new Error('VideoRoomListenerJanusPlugin join answer does not contains jsep')\n        }\n\n        const jsep = json.jsep\n        if (this.filterDirectCandidates && jsep.sdp) {\n          jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n        }\n\n        this.emit('jsep', jsep)\n        resolve(jsep)\n      }).catch((err) => {\n        this.logger.error('VideoRoomListenerJanusPlugin, unknown error connecting to room', err, join)\n        reject(err)\n      })\n    })\n  }\n\n  setAnswer (answer) {\n    const body = { request: 'start', room: this.janusRoomId }\n\n    return new Promise((resolve, reject) => {\n      const jsep = answer\n      if (this.filterDirectCandidates && jsep && jsep.sdp) {\n        jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n      }\n\n      this.transaction('message', { body, jsep }, 'event').then((param) => {\n        const { data, json } = param || {}\n\n        if (!data || data.started !== 'ok') {\n          this.logger.error('VideoRoomListenerJanusPlugin set answer is not ok', data, json)\n          throw new Error('VideoRoomListenerJanusPlugin set answer is not ok')\n        }\n        resolve()\n      }).catch((err) => {\n        this.logger.error('VideoRoomListenerJanusPlugin, unknown error sending answer', err, answer)\n        reject(err)\n      })\n    })\n  }\n\n  candidate (candidate) {\n    if (this.filterDirectCandidates && candidate.candidate && this.sdpHelper.isDirectCandidate(candidate.candidate)) {\n      return\n    }\n\n    return this.transaction('trickle', { candidate })\n  }\n\n  hangup () {\n    super.hangup()\n    this.janus.destroyPlugin(this).catch((err) => {\n      this.logger.error('VideoRoomListenerJanusPlugin, destroyPlugin error in hangup', err)\n    })\n  }\n}\n\nmodule.exports = VideoRoomListenerJanusPlugin\n","const Janus = require('./src/Janus')\nconst JanusAdmin = require('./src/JanusAdmin')\nconst JanusPlugin = require('./src/JanusPlugin')\nconst EchoJanusPlugin = require('./src/plugin/EchoJanusPlugin')\nconst RecordPlayJanusPlugin = require('./src/plugin/RecordPlayJanusPlugin')\nconst VideoRoomListenerJanusPlugin = require('./src/plugin/VideoRoomListenerJanusPlugin')\nconst VideoRoomPublisherJanusPlugin = require('./src/plugin/VideoRoomPublisherJanusPlugin')\nconst StreamingJanusPlugin = require('./src/plugin/StreamingJanusPlugin')\nconst { JanusConfig, JanusAdminConfig, JanusRoomConfig } = require('./src/Config')\n\nmodule.exports = {\n  Janus,\n  JanusAdmin,\n  JanusPlugin,\n  EchoJanusPlugin,\n  RecordPlayJanusPlugin,\n  VideoRoomListenerJanusPlugin,\n  VideoRoomPublisherJanusPlugin,\n  StreamingJanusPlugin,\n  JanusConfig,\n  JanusAdminConfig,\n  JanusRoomConfig\n}\n","class JanusConfig {\n  constructor (config) {\n    const {\n      url,\n      keepAliveIntervalMs,\n      options\n    } = config\n\n    this.url = url\n    this.keepAliveIntervalMs = keepAliveIntervalMs\n    this.options = options\n  }\n}\n\nclass JanusAdminConfig extends JanusConfig {\n  constructor (config) {\n    super(config)\n    const {\n      secret,\n      sessionListIntervalMs\n    } = config\n\n    this.secret = secret\n    this.sessionListIntervalMs = sessionListIntervalMs\n  }\n}\n\nclass JanusRoomConfig {\n  constructor (config) {\n    const {\n      id,\n      codec,\n      record,\n      videoOrientExt,\n      bitrate,\n      firSeconds,\n      publishers,\n      recordDirectory\n    } = config\n\n    this.id = id\n    this.codec = codec\n    this.record = record\n    this.videoOrientExt = videoOrientExt\n    this.bitrate = bitrate\n    this.firSeconds = firSeconds\n    this.publishers = publishers\n    this.recordDirectory = recordDirectory\n  }\n}\n\nmodule.exports.JanusConfig = JanusConfig\nmodule.exports.JanusAdminConfig = JanusAdminConfig\nmodule.exports.JanusRoomConfig = JanusRoomConfig\n","const JanusPlugin = require('../JanusPlugin')\nconst SdpHelper = require('../SdpHelper')\n\nclass RecordPlayJanusPlugin extends JanusPlugin {\n  constructor (logger, filterDirectCandidates = false) {\n    super(logger)\n    this.filterDirectCandidates = !!filterDirectCandidates\n    this.janusEchoBody = { audio: true, video: true }\n    this.pluginName = 'janus.plugin.recordplay'\n    this.sdpHelper = new SdpHelper(this.logger)\n  }\n\n  configure (videoBitrateMax = 1024 * 1024, videoKeyframeInterval = 15000) {\n    return this.transaction('message', { body: { request: 'configure', 'video-bitrate-max': videoBitrateMax, 'video-keyframe-interval': videoKeyframeInterval } }, 'success').catch((err) => {\n      this.logger.error('RecordPlayJanusPlugin, cannot configure', err)\n      throw err\n    })\n  }\n\n  onmessage (data, json) {\n    if (data && data.recordplay === 'event' && data.result === 'done') {\n      // okay, so the recording has ended\n      this.janus.destroyPlugin(this).catch((err) => {\n        this.logger.error('RecordPlayJanusPlugin, destroyPlugin error in onmessage', err)\n      })\n    } else {\n      this.logger.error('RecordPlayJanusPlugin got unknown message', data, json)\n    }\n  }\n\n  consume (data) {\n    if (data.type === 'message') {\n      const sendData = { jsep: data.message.jsep, body: { request: 'record', name: 'hello' } }\n      this.transaction('message', sendData, 'event').then((ret) => {\n        const { json, data } = ret\n        if (!data || !data.result || !data.result.id) {\n          this.logger.error('RecordPlayJanusPlugin, no recording id in the transaction reply', ret)\n          return\n        }\n\n        this.emit('recordingId', data.result.id)\n\n        if (!json || !json.jsep) {\n          this.logger.error('RecordPlayJanusPlugin, no jsep in the transaction reply', ret)\n          return\n        }\n\n        const jsep = json.jsep\n        if (this.filterDirectCandidates && jsep.sdp) {\n          jsep.sdp = this.sdpHelper.filterDirectCandidates(jsep.sdp)\n        }\n\n        this.emit('jsep', jsep)\n      })\n    } else if (data.type === 'candidate') {\n      if (this.filterDirectCandidates && data.message.candidate && this.sdpHelper.isDirectCandidate(data.message.candidate)) {\n        return\n      }\n      this.transaction('trickle', { candidate: data.message })\n    } else if (data.type === 'stop') {\n      const sendData = { body: { request: 'stop' } }\n      this.transaction('message', sendData, 'event')\n    } else {\n      this.logger.error('RecordPlayJanusPlugin unknown data type', data)\n    }\n  }\n}\n\nmodule.exports = RecordPlayJanusPlugin\n"],"sourceRoot":""}